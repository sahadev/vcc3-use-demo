import type { DefineComponent, Plugin } from 'vue';
import type { RangePickerPropsTypes, MonthPickerPropsTypes, WeekPickerPropsTypes } from './interface';
declare const WrappedRangePicker: DefineComponent<RangePickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tagPrefixCls?: unknown;
    value?: unknown;
    defaultValue?: unknown;
    defaultPickerValue?: unknown;
    timePicker?: unknown;
    onChange?: unknown;
    onCalendarChange?: unknown;
    onOk?: unknown;
    showTime?: unknown;
    showToday?: unknown;
    ranges?: unknown;
    placeholder?: unknown;
    mode?: unknown;
    separator?: unknown;
    disabledTime?: unknown;
    onPanelChange?: unknown;
    renderExtraFooter?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
    name?: unknown;
    transitionName?: unknown;
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    format?: unknown;
    disabled?: unknown;
    allowClear?: unknown;
    pickerClass?: unknown;
    pickerInputClass?: unknown;
    suffixIcon?: unknown;
    popupStyle?: unknown;
    dropdownClassName?: unknown;
    locale?: unknown;
    localeCode?: unknown;
    size?: unknown;
    getCalendarContainer?: unknown;
    open?: unknown;
    valueFormat?: unknown;
    onOpenChange?: unknown;
    disabledDate?: unknown;
    dateRender?: unknown;
    autofocus?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    locale: any;
} & {
    name?: string;
    value?: import("./interface").RangePickerValue;
    format?: string | Function | string[];
    prefixCls?: string;
    onFocus?: void;
    onBlur?: void;
    onChange?: (dates: import("./interface").RangePickerValue, dateStrings: [string, string]) => void;
    onMouseenter?: (e: MouseEvent) => void;
    onMouseleave?: (e: MouseEvent) => void;
    size?: "default" | "small" | "large";
    open?: boolean;
    separator?: import("../_util/type").VueNode;
    disabled?: boolean;
    mode?: string | string[];
    autofocus?: boolean;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: import("./interface").RangePickerValue;
    allowClear?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    onOpenChange?: (status: boolean) => void;
    inputPrefixCls?: string;
    disabledDate?: (current: import("moment").Moment) => boolean;
    valueFormat?: string;
    onPanelChange?: void;
    showToday?: boolean;
    tagPrefixCls?: string;
    defaultPickerValue?: import("./interface").RangePickerValue;
    timePicker?: import("../_util/type").VueNode;
    showTime?: boolean | Record<string, any>;
    ranges?: import("./interface").RangePickerValue;
    disabledTime?: (current: import("./interface").RangePickerValue, type: string) => {
        disabledHours?: () => number[];
        disabledMinutes?: () => number[];
        disabledSeconds?: () => number[];
    };
    renderExtraFooter?: unknown;
    onCalendarChange?: (dates: import("./interface").RangePickerValue, dateStrings: [string, string]) => void;
    onOk?: (selectedTime: import("./interface").RangePickerPresetRange) => void;
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
}>, {
    locale: any;
}>;
declare const WrappedWeekPicker: DefineComponent<WeekPickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name?: unknown;
    transitionName?: unknown;
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    format?: unknown;
    disabled?: unknown;
    allowClear?: unknown;
    pickerClass?: unknown;
    pickerInputClass?: unknown;
    suffixIcon?: unknown;
    popupStyle?: unknown;
    dropdownClassName?: unknown;
    locale?: unknown;
    localeCode?: unknown;
    size?: unknown;
    getCalendarContainer?: unknown;
    open?: unknown;
    valueFormat?: unknown;
    onOpenChange?: unknown;
    disabledDate?: unknown;
    dateRender?: unknown;
    autofocus?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    value?: unknown;
    defaultValue?: unknown;
    defaultPickerValue?: unknown;
    placeholder?: unknown;
    renderExtraFooter?: unknown;
    onChange?: unknown;
} & {
    locale: any;
} & {
    name?: string;
    value?: string | import("moment").Moment;
    format?: string | Function | string[];
    prefixCls?: string;
    onFocus?: void;
    onBlur?: void;
    onChange?: (date: import("moment").Moment, dateString: string) => void;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    autofocus?: boolean;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: string | import("moment").Moment;
    allowClear?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    onOpenChange?: (status: boolean) => void;
    inputPrefixCls?: string;
    disabledDate?: (current: import("moment").Moment) => boolean;
    valueFormat?: string;
    defaultPickerValue?: string | import("moment").Moment;
    renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
}>, {
    locale: any;
}>;
export declare const MonthPicker: DefineComponent<MonthPickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    monthCellContentRender?: unknown;
    name?: unknown;
    transitionName?: unknown;
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    format?: unknown;
    disabled?: unknown;
    allowClear?: unknown;
    pickerClass?: unknown;
    pickerInputClass?: unknown;
    suffixIcon?: unknown;
    popupStyle?: unknown;
    dropdownClassName?: unknown;
    locale?: unknown;
    localeCode?: unknown;
    size?: unknown;
    getCalendarContainer?: unknown;
    open?: unknown;
    valueFormat?: unknown;
    onOpenChange?: unknown;
    disabledDate?: unknown;
    dateRender?: unknown;
    autofocus?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    value?: unknown;
    defaultValue?: unknown;
    defaultPickerValue?: unknown;
    placeholder?: unknown;
    renderExtraFooter?: unknown;
    onChange?: unknown;
} & {
    locale: any;
} & {
    name?: string;
    value?: string | import("moment").Moment;
    format?: string | Function | string[];
    prefixCls?: string;
    onFocus?: void;
    onBlur?: void;
    onChange?: (date: import("moment").Moment, dateString: string) => void;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    autofocus?: boolean;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: string | import("moment").Moment;
    allowClear?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    onOpenChange?: (status: boolean) => void;
    inputPrefixCls?: string;
    disabledDate?: (current: import("moment").Moment) => boolean;
    valueFormat?: string;
    defaultPickerValue?: string | import("moment").Moment;
    renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
    monthCellContentRender?: (date: import("moment").Moment, locale: any) => any;
}>, {
    locale: any;
}>;
export { WrappedRangePicker as RangePicker, WrappedWeekPicker as WeekPicker };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            locale: any;
        }> & Omit<Readonly<{
            showTime?: unknown;
            showToday?: unknown;
            open?: unknown;
            disabledTime?: unknown;
            onOpenChange?: unknown;
            onPanelChange?: unknown;
            onOk?: unknown;
            mode?: unknown;
            name?: unknown;
            transitionName?: unknown;
            prefixCls?: unknown;
            inputPrefixCls?: unknown;
            format?: unknown;
            disabled?: unknown;
            allowClear?: unknown;
            pickerClass?: unknown;
            pickerInputClass?: unknown;
            suffixIcon?: unknown;
            popupStyle?: unknown;
            dropdownClassName?: unknown;
            locale?: unknown;
            localeCode?: unknown;
            size?: unknown;
            getCalendarContainer?: unknown;
            valueFormat?: unknown;
            disabledDate?: unknown;
            dateRender?: unknown;
            autofocus?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            value?: unknown;
            defaultValue?: unknown;
            defaultPickerValue?: unknown;
            placeholder?: unknown;
            renderExtraFooter?: unknown;
            onChange?: unknown;
        } & {
            locale: any;
        } & {
            name?: string;
            value?: string | import("moment").Moment;
            format?: string | Function | string[];
            prefixCls?: string;
            onFocus?: void;
            onBlur?: void;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "date" | "time" | "year" | "month" | "decade";
            autofocus?: boolean;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: string | import("moment").Moment;
            allowClear?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            onOpenChange?: (status: boolean) => void;
            inputPrefixCls?: string;
            disabledDate?: (current: import("moment").Moment) => boolean;
            valueFormat?: string;
            onPanelChange?: (value: import("moment").Moment, mode: "date" | "time" | "year" | "month" | "decade") => void;
            showToday?: boolean;
            defaultPickerValue?: string | import("moment").Moment;
            showTime?: boolean | Record<string, any>;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "locale">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            showTime?: unknown;
            showToday?: unknown;
            open?: unknown;
            disabledTime?: unknown;
            onOpenChange?: unknown;
            onPanelChange?: unknown;
            onOk?: unknown;
            mode?: unknown;
            name?: unknown;
            transitionName?: unknown;
            prefixCls?: unknown;
            inputPrefixCls?: unknown;
            format?: unknown;
            disabled?: unknown;
            allowClear?: unknown;
            pickerClass?: unknown;
            pickerInputClass?: unknown;
            suffixIcon?: unknown;
            popupStyle?: unknown;
            dropdownClassName?: unknown;
            locale?: unknown;
            localeCode?: unknown;
            size?: unknown;
            getCalendarContainer?: unknown;
            valueFormat?: unknown;
            disabledDate?: unknown;
            dateRender?: unknown;
            autofocus?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
            value?: unknown;
            defaultValue?: unknown;
            defaultPickerValue?: unknown;
            placeholder?: unknown;
            renderExtraFooter?: unknown;
            onChange?: unknown;
        } & {
            locale: any;
        } & {
            name?: string;
            value?: string | import("moment").Moment;
            format?: string | Function | string[];
            prefixCls?: string;
            onFocus?: void;
            onBlur?: void;
            onChange?: (date: import("moment").Moment, dateString: string) => void;
            size?: "default" | "small" | "large";
            open?: boolean;
            disabled?: boolean;
            mode?: "date" | "time" | "year" | "month" | "decade";
            autofocus?: boolean;
            placeholder?: string;
            transitionName?: string;
            dropdownClassName?: string;
            popupStyle?: import("vue").CSSProperties;
            defaultValue?: string | import("moment").Moment;
            allowClear?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            onOpenChange?: (status: boolean) => void;
            inputPrefixCls?: string;
            disabledDate?: (current: import("moment").Moment) => boolean;
            valueFormat?: string;
            onPanelChange?: (value: import("moment").Moment, mode: "date" | "time" | "year" | "month" | "decade") => void;
            showToday?: boolean;
            defaultPickerValue?: string | import("moment").Moment;
            showTime?: boolean | Record<string, any>;
            disabledTime?: unknown;
            renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
            onOk?: (selectedTime: import("moment").Moment) => void;
            localeCode?: string;
            getCalendarContainer?: (triggerNode: Element) => HTMLElement;
            dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
            pickerClass?: string;
            pickerInputClass?: string;
        }>, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            locale: any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        showTime?: unknown;
        showToday?: unknown;
        open?: unknown;
        disabledTime?: unknown;
        onOpenChange?: unknown;
        onPanelChange?: unknown;
        onOk?: unknown;
        mode?: unknown;
        name?: unknown;
        transitionName?: unknown;
        prefixCls?: unknown;
        inputPrefixCls?: unknown;
        format?: unknown;
        disabled?: unknown;
        allowClear?: unknown;
        pickerClass?: unknown;
        pickerInputClass?: unknown;
        suffixIcon?: unknown;
        popupStyle?: unknown;
        dropdownClassName?: unknown;
        locale?: unknown;
        localeCode?: unknown;
        size?: unknown;
        getCalendarContainer?: unknown;
        valueFormat?: unknown;
        disabledDate?: unknown;
        dateRender?: unknown;
        autofocus?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        value?: unknown;
        defaultValue?: unknown;
        defaultPickerValue?: unknown;
        placeholder?: unknown;
        renderExtraFooter?: unknown;
        onChange?: unknown;
    } & {
        locale: any;
    } & {
        name?: string;
        value?: string | import("moment").Moment;
        format?: string | Function | string[];
        prefixCls?: string;
        onFocus?: void;
        onBlur?: void;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        mode?: "date" | "time" | "year" | "month" | "decade";
        autofocus?: boolean;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: string | import("moment").Moment;
        allowClear?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        onOpenChange?: (status: boolean) => void;
        inputPrefixCls?: string;
        disabledDate?: (current: import("moment").Moment) => boolean;
        valueFormat?: string;
        onPanelChange?: (value: import("moment").Moment, mode: "date" | "time" | "year" | "month" | "decade") => void;
        showToday?: boolean;
        defaultPickerValue?: string | import("moment").Moment;
        showTime?: boolean | Record<string, any>;
        disabledTime?: unknown;
        renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
        onOk?: (selectedTime: import("moment").Moment) => void;
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
    }> & import("vue").ShallowUnwrapRef<{}> & {} & {
        [x: string]: never;
    } & import("vue").MethodOptions & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    showTime?: unknown;
    showToday?: unknown;
    open?: unknown;
    disabledTime?: unknown;
    onOpenChange?: unknown;
    onPanelChange?: unknown;
    onOk?: unknown;
    mode?: unknown;
    name?: unknown;
    transitionName?: unknown;
    prefixCls?: unknown;
    inputPrefixCls?: unknown;
    format?: unknown;
    disabled?: unknown;
    allowClear?: unknown;
    pickerClass?: unknown;
    pickerInputClass?: unknown;
    suffixIcon?: unknown;
    popupStyle?: unknown;
    dropdownClassName?: unknown;
    locale?: unknown;
    localeCode?: unknown;
    size?: unknown;
    getCalendarContainer?: unknown;
    valueFormat?: unknown;
    disabledDate?: unknown;
    dateRender?: unknown;
    autofocus?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
    value?: unknown;
    defaultValue?: unknown;
    defaultPickerValue?: unknown;
    placeholder?: unknown;
    renderExtraFooter?: unknown;
    onChange?: unknown;
} & {
    locale: any;
} & {
    name?: string;
    value?: string | import("moment").Moment;
    format?: string | Function | string[];
    prefixCls?: string;
    onFocus?: void;
    onBlur?: void;
    onChange?: (date: import("moment").Moment, dateString: string) => void;
    size?: "default" | "small" | "large";
    open?: boolean;
    disabled?: boolean;
    mode?: "date" | "time" | "year" | "month" | "decade";
    autofocus?: boolean;
    placeholder?: string;
    transitionName?: string;
    dropdownClassName?: string;
    popupStyle?: import("vue").CSSProperties;
    defaultValue?: string | import("moment").Moment;
    allowClear?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    onOpenChange?: (status: boolean) => void;
    inputPrefixCls?: string;
    disabledDate?: (current: import("moment").Moment) => boolean;
    valueFormat?: string;
    onPanelChange?: (value: import("moment").Moment, mode: "date" | "time" | "year" | "month" | "decade") => void;
    showToday?: boolean;
    defaultPickerValue?: string | import("moment").Moment;
    showTime?: boolean | Record<string, any>;
    disabledTime?: unknown;
    renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
    onOk?: (selectedTime: import("moment").Moment) => void;
    localeCode?: string;
    getCalendarContainer?: (triggerNode: Element) => HTMLElement;
    dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
    pickerClass?: string;
    pickerInputClass?: string;
}>, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    locale: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly RangePicker: DefineComponent<RangePickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        tagPrefixCls?: unknown;
        value?: unknown;
        defaultValue?: unknown;
        defaultPickerValue?: unknown;
        timePicker?: unknown;
        onChange?: unknown;
        onCalendarChange?: unknown;
        onOk?: unknown;
        showTime?: unknown;
        showToday?: unknown;
        ranges?: unknown;
        placeholder?: unknown;
        mode?: unknown;
        separator?: unknown;
        disabledTime?: unknown;
        onPanelChange?: unknown;
        renderExtraFooter?: unknown;
        onMouseenter?: unknown;
        onMouseleave?: unknown;
        name?: unknown;
        transitionName?: unknown;
        prefixCls?: unknown;
        inputPrefixCls?: unknown;
        format?: unknown;
        disabled?: unknown;
        allowClear?: unknown;
        pickerClass?: unknown;
        pickerInputClass?: unknown;
        suffixIcon?: unknown;
        popupStyle?: unknown;
        dropdownClassName?: unknown;
        locale?: unknown;
        localeCode?: unknown;
        size?: unknown;
        getCalendarContainer?: unknown;
        open?: unknown;
        valueFormat?: unknown;
        onOpenChange?: unknown;
        disabledDate?: unknown;
        dateRender?: unknown;
        autofocus?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
    } & {
        locale: any;
    } & {
        name?: string;
        value?: import("./interface").RangePickerValue;
        format?: string | Function | string[];
        prefixCls?: string;
        onFocus?: void;
        onBlur?: void;
        onChange?: (dates: import("./interface").RangePickerValue, dateStrings: [string, string]) => void;
        onMouseenter?: (e: MouseEvent) => void;
        onMouseleave?: (e: MouseEvent) => void;
        size?: "default" | "small" | "large";
        open?: boolean;
        separator?: import("../_util/type").VueNode;
        disabled?: boolean;
        mode?: string | string[];
        autofocus?: boolean;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: import("./interface").RangePickerValue;
        allowClear?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        onOpenChange?: (status: boolean) => void;
        inputPrefixCls?: string;
        disabledDate?: (current: import("moment").Moment) => boolean;
        valueFormat?: string;
        onPanelChange?: void;
        showToday?: boolean;
        tagPrefixCls?: string;
        defaultPickerValue?: import("./interface").RangePickerValue;
        timePicker?: import("../_util/type").VueNode;
        showTime?: boolean | Record<string, any>;
        ranges?: import("./interface").RangePickerValue;
        disabledTime?: (current: import("./interface").RangePickerValue, type: string) => {
            disabledHours?: () => number[];
            disabledMinutes?: () => number[];
            disabledSeconds?: () => number[];
        };
        renderExtraFooter?: unknown;
        onCalendarChange?: (dates: import("./interface").RangePickerValue, dateStrings: [string, string]) => void;
        onOk?: (selectedTime: import("./interface").RangePickerPresetRange) => void;
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
    }>, {
        locale: any;
    }>;
    readonly MonthPicker: DefineComponent<MonthPickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        monthCellContentRender?: unknown;
        name?: unknown;
        transitionName?: unknown;
        prefixCls?: unknown;
        inputPrefixCls?: unknown;
        format?: unknown;
        disabled?: unknown;
        allowClear?: unknown;
        pickerClass?: unknown;
        pickerInputClass?: unknown;
        suffixIcon?: unknown;
        popupStyle?: unknown;
        dropdownClassName?: unknown;
        locale?: unknown;
        localeCode?: unknown;
        size?: unknown;
        getCalendarContainer?: unknown;
        open?: unknown;
        valueFormat?: unknown;
        onOpenChange?: unknown;
        disabledDate?: unknown;
        dateRender?: unknown;
        autofocus?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        value?: unknown;
        defaultValue?: unknown;
        defaultPickerValue?: unknown;
        placeholder?: unknown;
        renderExtraFooter?: unknown;
        onChange?: unknown;
    } & {
        locale: any;
    } & {
        name?: string;
        value?: string | import("moment").Moment;
        format?: string | Function | string[];
        prefixCls?: string;
        onFocus?: void;
        onBlur?: void;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        autofocus?: boolean;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: string | import("moment").Moment;
        allowClear?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        onOpenChange?: (status: boolean) => void;
        inputPrefixCls?: string;
        disabledDate?: (current: import("moment").Moment) => boolean;
        valueFormat?: string;
        defaultPickerValue?: string | import("moment").Moment;
        renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
        monthCellContentRender?: (date: import("moment").Moment, locale: any) => any;
    }>, {
        locale: any;
    }>;
    readonly WeekPicker: DefineComponent<WeekPickerPropsTypes, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        name?: unknown;
        transitionName?: unknown;
        prefixCls?: unknown;
        inputPrefixCls?: unknown;
        format?: unknown;
        disabled?: unknown;
        allowClear?: unknown;
        pickerClass?: unknown;
        pickerInputClass?: unknown;
        suffixIcon?: unknown;
        popupStyle?: unknown;
        dropdownClassName?: unknown;
        locale?: unknown;
        localeCode?: unknown;
        size?: unknown;
        getCalendarContainer?: unknown;
        open?: unknown;
        valueFormat?: unknown;
        onOpenChange?: unknown;
        disabledDate?: unknown;
        dateRender?: unknown;
        autofocus?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
        value?: unknown;
        defaultValue?: unknown;
        defaultPickerValue?: unknown;
        placeholder?: unknown;
        renderExtraFooter?: unknown;
        onChange?: unknown;
    } & {
        locale: any;
    } & {
        name?: string;
        value?: string | import("moment").Moment;
        format?: string | Function | string[];
        prefixCls?: string;
        onFocus?: void;
        onBlur?: void;
        onChange?: (date: import("moment").Moment, dateString: string) => void;
        size?: "default" | "small" | "large";
        open?: boolean;
        disabled?: boolean;
        autofocus?: boolean;
        placeholder?: string;
        transitionName?: string;
        dropdownClassName?: string;
        popupStyle?: import("vue").CSSProperties;
        defaultValue?: string | import("moment").Moment;
        allowClear?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        onOpenChange?: (status: boolean) => void;
        inputPrefixCls?: string;
        disabledDate?: (current: import("moment").Moment) => boolean;
        valueFormat?: string;
        defaultPickerValue?: string | import("moment").Moment;
        renderExtraFooter?: (mode: "date" | "time" | "year" | "month" | "decade") => any;
        localeCode?: string;
        getCalendarContainer?: (triggerNode: Element) => HTMLElement;
        dateRender?: (current: import("moment").Moment, today: import("moment").Moment) => any;
        pickerClass?: string;
        pickerInputClass?: string;
    }>, {
        locale: any;
    }>;
} & Plugin;
export default _default;
