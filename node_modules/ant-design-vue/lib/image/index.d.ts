import type { ExtractPropTypes, ImgHTMLAttributes, Plugin } from 'vue';
import { imageProps } from '../vc-image/src/Image';
import PreviewGroup from './PreviewGroup';
export declare type ImageProps = Partial<ExtractPropTypes<typeof imageProps> & Omit<ImgHTMLAttributes, 'placeholder' | 'onClick'>>;
export { imageProps };
export { PreviewGroup as ImagePreviewGroup };
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            class: any;
            inlist: any;
        }> & Omit<Readonly<{
            src?: unknown;
            wrapperClassName?: unknown;
            wrapperStyle?: unknown;
            prefixCls?: unknown;
            previewPrefixCls?: unknown;
            placeholder?: unknown;
            fallback?: unknown;
            preview?: unknown;
            style?: unknown;
            class?: unknown;
            title?: unknown;
            onCopy?: unknown;
            onCut?: unknown;
            onPaste?: unknown;
            onCompositionend?: unknown;
            onCompositionstart?: unknown;
            onCompositionupdate?: unknown;
            onDrag?: unknown;
            onDragend?: unknown;
            onDragenter?: unknown;
            onDragexit?: unknown;
            onDragleave?: unknown;
            onDragover?: unknown;
            onDragstart?: unknown;
            onDrop?: unknown;
            onFocus?: unknown;
            onFocusin?: unknown;
            onFocusout?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onBeforeinput?: unknown;
            onInput?: unknown;
            onReset?: unknown;
            onSubmit?: unknown;
            onInvalid?: unknown;
            onLoad?: unknown;
            onError?: unknown;
            onKeydown?: unknown;
            onKeypress?: unknown;
            onKeyup?: unknown;
            onAuxclick?: unknown;
            onContextmenu?: unknown;
            onDblclick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onMousemove?: unknown;
            onMouseout?: unknown;
            onMouseover?: unknown;
            onMouseup?: unknown;
            onAbort?: unknown;
            onCanplay?: unknown;
            onCanplaythrough?: unknown;
            onDurationchange?: unknown;
            onEmptied?: unknown;
            onEncrypted?: unknown;
            onEnded?: unknown;
            onLoadeddata?: unknown;
            onLoadedmetadata?: unknown;
            onLoadstart?: unknown;
            onPause?: unknown;
            onPlay?: unknown;
            onPlaying?: unknown;
            onProgress?: unknown;
            onRatechange?: unknown;
            onSeeked?: unknown;
            onSeeking?: unknown;
            onStalled?: unknown;
            onSuspend?: unknown;
            onTimeupdate?: unknown;
            onVolumechange?: unknown;
            onWaiting?: unknown;
            onSelect?: unknown;
            onScroll?: unknown;
            onTouchcancel?: unknown;
            onTouchend?: unknown;
            onTouchmove?: unknown;
            onTouchstart?: unknown;
            onPointerdown?: unknown;
            onPointermove?: unknown;
            onPointerup?: unknown;
            onPointercancel?: unknown;
            onPointerenter?: unknown;
            onPointerleave?: unknown;
            onPointerover?: unknown;
            onPointerout?: unknown;
            onWheel?: unknown;
            onAnimationstart?: unknown;
            onAnimationend?: unknown;
            onAnimationiteration?: unknown;
            onTransitionend?: unknown;
            onTransitionstart?: unknown;
            role?: unknown;
            tabindex?: unknown;
            hidden?: unknown;
            color?: unknown;
            width?: unknown;
            height?: unknown;
            contextmenu?: unknown;
            id?: unknown;
            'aria-hidden'?: unknown;
            dir?: unknown;
            'aria-selected'?: unknown;
            prefix?: unknown;
            srcset?: unknown;
            alt?: unknown;
            draggable?: unknown;
            innerHTML?: unknown;
            accesskey?: unknown;
            contenteditable?: unknown;
            lang?: unknown;
            spellcheck?: unknown;
            translate?: unknown;
            radiogroup?: unknown;
            about?: unknown;
            datatype?: unknown;
            inlist?: unknown;
            property?: unknown;
            resource?: unknown;
            typeof?: unknown;
            vocab?: unknown;
            autocapitalize?: unknown;
            autocorrect?: unknown;
            autocave?: unknown;
            itemprop?: unknown;
            itemscope?: unknown;
            itemtype?: unknown;
            itemid?: unknown;
            itemref?: unknown;
            results?: unknown;
            security?: unknown;
            unselectable?: unknown;
            inputmode?: unknown;
            is?: unknown;
            'aria-activedescendant'?: unknown;
            'aria-atomic'?: unknown;
            'aria-autocomplete'?: unknown;
            'aria-busy'?: unknown;
            'aria-checked'?: unknown;
            'aria-colcount'?: unknown;
            'aria-colindex'?: unknown;
            'aria-colspan'?: unknown;
            'aria-controls'?: unknown;
            'aria-current'?: unknown;
            'aria-describedby'?: unknown;
            'aria-details'?: unknown;
            'aria-disabled'?: unknown;
            'aria-dropeffect'?: unknown;
            'aria-errormessage'?: unknown;
            'aria-expanded'?: unknown;
            'aria-flowto'?: unknown;
            'aria-grabbed'?: unknown;
            'aria-haspopup'?: unknown;
            'aria-invalid'?: unknown;
            'aria-keyshortcuts'?: unknown;
            'aria-label'?: unknown;
            'aria-labelledby'?: unknown;
            'aria-level'?: unknown;
            'aria-live'?: unknown;
            'aria-modal'?: unknown;
            'aria-multiline'?: unknown;
            'aria-multiselectable'?: unknown;
            'aria-orientation'?: unknown;
            'aria-owns'?: unknown;
            'aria-placeholder'?: unknown;
            'aria-posinset'?: unknown;
            'aria-pressed'?: unknown;
            'aria-readonly'?: unknown;
            'aria-relevant'?: unknown;
            'aria-required'?: unknown;
            'aria-roledescription'?: unknown;
            'aria-rowcount'?: unknown;
            'aria-rowindex'?: unknown;
            'aria-rowspan'?: unknown;
            'aria-setsize'?: unknown;
            'aria-sort'?: unknown;
            'aria-valuemax'?: unknown;
            'aria-valuemin'?: unknown;
            'aria-valuenow'?: unknown;
            'aria-valuetext'?: unknown;
            crossorigin?: unknown;
            decoding?: unknown;
            sizes?: unknown;
            usemap?: unknown;
        } & {
            class: any;
            inlist: any;
        } & {
            style?: import("vue").StyleValue;
            preview?: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (props: Record<string, unknown>) => never;
            };
            prefixCls?: string;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onFocusin?: (payload: FocusEvent) => void;
            onFocusout?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            role?: string;
            tabindex?: string | number;
            hidden?: boolean | "false" | "true";
            color?: string;
            width?: string | number;
            height?: string | number;
            contextmenu?: string;
            id?: string;
            "aria-hidden"?: boolean | "false" | "true";
            placeholder?: import("../_util/type").VueNode;
            dir?: string;
            wrapperClassName?: string;
            "aria-selected"?: boolean | "false" | "true";
            wrapperStyle?: import("vue").CSSProperties;
            prefix?: string;
            src?: string;
            srcset?: string;
            alt?: string;
            draggable?: boolean | "false" | "true";
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: "inherit" | (boolean | "false" | "true");
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean | "false" | "true";
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: string | number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "url" | "email" | "text" | "none" | "search" | "tel" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "both" | "inline" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: "mixed" | (boolean | "false" | "true");
            "aria-colcount"?: string | number;
            "aria-colindex"?: string | number;
            "aria-colspan"?: string | number;
            "aria-controls"?: string;
            "aria-current"?: "date" | "time" | "page" | (boolean | "false" | "true") | "step" | "location";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: "dialog" | "menu" | "listbox" | "grid" | (boolean | "false" | "true") | "tree";
            "aria-invalid"?: (boolean | "false" | "true") | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: string | number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: string | number;
            "aria-pressed"?: "mixed" | (boolean | "false" | "true");
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: string | number;
            "aria-rowindex"?: string | number;
            "aria-rowspan"?: string | number;
            "aria-setsize"?: string | number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: string | number;
            "aria-valuemin"?: string | number;
            "aria-valuenow"?: string | number;
            "aria-valuetext"?: string;
            previewPrefixCls?: string;
            crossorigin?: "" | "anonymous" | "use-credentials";
            decoding?: "auto" | "sync" | "async";
            sizes?: string;
            usemap?: string;
            fallback?: string;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "class" | "inlist">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            src?: unknown;
            wrapperClassName?: unknown;
            wrapperStyle?: unknown;
            prefixCls?: unknown;
            previewPrefixCls?: unknown;
            placeholder?: unknown;
            fallback?: unknown;
            preview?: unknown;
            style?: unknown;
            class?: unknown;
            title?: unknown;
            onCopy?: unknown;
            onCut?: unknown;
            onPaste?: unknown;
            onCompositionend?: unknown;
            onCompositionstart?: unknown;
            onCompositionupdate?: unknown;
            onDrag?: unknown;
            onDragend?: unknown;
            onDragenter?: unknown;
            onDragexit?: unknown;
            onDragleave?: unknown;
            onDragover?: unknown;
            onDragstart?: unknown;
            onDrop?: unknown;
            onFocus?: unknown;
            onFocusin?: unknown;
            onFocusout?: unknown;
            onBlur?: unknown;
            onChange?: unknown;
            onBeforeinput?: unknown;
            onInput?: unknown;
            onReset?: unknown;
            onSubmit?: unknown;
            onInvalid?: unknown;
            onLoad?: unknown;
            onError?: unknown;
            onKeydown?: unknown;
            onKeypress?: unknown;
            onKeyup?: unknown;
            onAuxclick?: unknown;
            onContextmenu?: unknown;
            onDblclick?: unknown;
            onMousedown?: unknown;
            onMouseenter?: unknown;
            onMouseleave?: unknown;
            onMousemove?: unknown;
            onMouseout?: unknown;
            onMouseover?: unknown;
            onMouseup?: unknown;
            onAbort?: unknown;
            onCanplay?: unknown;
            onCanplaythrough?: unknown;
            onDurationchange?: unknown;
            onEmptied?: unknown;
            onEncrypted?: unknown;
            onEnded?: unknown;
            onLoadeddata?: unknown;
            onLoadedmetadata?: unknown;
            onLoadstart?: unknown;
            onPause?: unknown;
            onPlay?: unknown;
            onPlaying?: unknown;
            onProgress?: unknown;
            onRatechange?: unknown;
            onSeeked?: unknown;
            onSeeking?: unknown;
            onStalled?: unknown;
            onSuspend?: unknown;
            onTimeupdate?: unknown;
            onVolumechange?: unknown;
            onWaiting?: unknown;
            onSelect?: unknown;
            onScroll?: unknown;
            onTouchcancel?: unknown;
            onTouchend?: unknown;
            onTouchmove?: unknown;
            onTouchstart?: unknown;
            onPointerdown?: unknown;
            onPointermove?: unknown;
            onPointerup?: unknown;
            onPointercancel?: unknown;
            onPointerenter?: unknown;
            onPointerleave?: unknown;
            onPointerover?: unknown;
            onPointerout?: unknown;
            onWheel?: unknown;
            onAnimationstart?: unknown;
            onAnimationend?: unknown;
            onAnimationiteration?: unknown;
            onTransitionend?: unknown;
            onTransitionstart?: unknown;
            role?: unknown;
            tabindex?: unknown;
            hidden?: unknown;
            color?: unknown;
            width?: unknown;
            height?: unknown;
            contextmenu?: unknown;
            id?: unknown;
            'aria-hidden'?: unknown;
            dir?: unknown;
            'aria-selected'?: unknown;
            prefix?: unknown;
            srcset?: unknown;
            alt?: unknown;
            draggable?: unknown;
            innerHTML?: unknown;
            accesskey?: unknown;
            contenteditable?: unknown;
            lang?: unknown;
            spellcheck?: unknown;
            translate?: unknown;
            radiogroup?: unknown;
            about?: unknown;
            datatype?: unknown;
            inlist?: unknown;
            property?: unknown;
            resource?: unknown;
            typeof?: unknown;
            vocab?: unknown;
            autocapitalize?: unknown;
            autocorrect?: unknown;
            autocave?: unknown;
            itemprop?: unknown;
            itemscope?: unknown;
            itemtype?: unknown;
            itemid?: unknown;
            itemref?: unknown;
            results?: unknown;
            security?: unknown;
            unselectable?: unknown;
            inputmode?: unknown;
            is?: unknown;
            'aria-activedescendant'?: unknown;
            'aria-atomic'?: unknown;
            'aria-autocomplete'?: unknown;
            'aria-busy'?: unknown;
            'aria-checked'?: unknown;
            'aria-colcount'?: unknown;
            'aria-colindex'?: unknown;
            'aria-colspan'?: unknown;
            'aria-controls'?: unknown;
            'aria-current'?: unknown;
            'aria-describedby'?: unknown;
            'aria-details'?: unknown;
            'aria-disabled'?: unknown;
            'aria-dropeffect'?: unknown;
            'aria-errormessage'?: unknown;
            'aria-expanded'?: unknown;
            'aria-flowto'?: unknown;
            'aria-grabbed'?: unknown;
            'aria-haspopup'?: unknown;
            'aria-invalid'?: unknown;
            'aria-keyshortcuts'?: unknown;
            'aria-label'?: unknown;
            'aria-labelledby'?: unknown;
            'aria-level'?: unknown;
            'aria-live'?: unknown;
            'aria-modal'?: unknown;
            'aria-multiline'?: unknown;
            'aria-multiselectable'?: unknown;
            'aria-orientation'?: unknown;
            'aria-owns'?: unknown;
            'aria-placeholder'?: unknown;
            'aria-posinset'?: unknown;
            'aria-pressed'?: unknown;
            'aria-readonly'?: unknown;
            'aria-relevant'?: unknown;
            'aria-required'?: unknown;
            'aria-roledescription'?: unknown;
            'aria-rowcount'?: unknown;
            'aria-rowindex'?: unknown;
            'aria-rowspan'?: unknown;
            'aria-setsize'?: unknown;
            'aria-sort'?: unknown;
            'aria-valuemax'?: unknown;
            'aria-valuemin'?: unknown;
            'aria-valuenow'?: unknown;
            'aria-valuetext'?: unknown;
            crossorigin?: unknown;
            decoding?: unknown;
            sizes?: unknown;
            usemap?: unknown;
        } & {
            class: any;
            inlist: any;
        } & {
            style?: import("vue").StyleValue;
            preview?: boolean | {
                visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                onVisibleChange: any;
                getContainer: (props: Record<string, unknown>) => never;
            };
            prefixCls?: string;
            title?: string;
            onCopy?: (payload: ClipboardEvent) => void;
            onCut?: (payload: ClipboardEvent) => void;
            onPaste?: (payload: ClipboardEvent) => void;
            onCompositionend?: (payload: CompositionEvent) => void;
            onCompositionstart?: (payload: CompositionEvent) => void;
            onCompositionupdate?: (payload: CompositionEvent) => void;
            onDrag?: (payload: DragEvent) => void;
            onDragend?: (payload: DragEvent) => void;
            onDragenter?: (payload: DragEvent) => void;
            onDragexit?: (payload: DragEvent) => void;
            onDragleave?: (payload: DragEvent) => void;
            onDragover?: (payload: DragEvent) => void;
            onDragstart?: (payload: DragEvent) => void;
            onDrop?: (payload: DragEvent) => void;
            onFocus?: (payload: FocusEvent) => void;
            onFocusin?: (payload: FocusEvent) => void;
            onFocusout?: (payload: FocusEvent) => void;
            onBlur?: (payload: FocusEvent) => void;
            onChange?: (payload: Event) => void;
            onBeforeinput?: (payload: Event) => void;
            onInput?: (payload: Event) => void;
            onReset?: (payload: Event) => void;
            onSubmit?: (payload: Event) => void;
            onInvalid?: (payload: Event) => void;
            onLoad?: (payload: Event) => void;
            onError?: (payload: Event) => void;
            onKeydown?: (payload: KeyboardEvent) => void;
            onKeypress?: (payload: KeyboardEvent) => void;
            onKeyup?: (payload: KeyboardEvent) => void;
            onAuxclick?: (payload: MouseEvent) => void;
            onContextmenu?: (payload: MouseEvent) => void;
            onDblclick?: (payload: MouseEvent) => void;
            onMousedown?: (payload: MouseEvent) => void;
            onMouseenter?: (payload: MouseEvent) => void;
            onMouseleave?: (payload: MouseEvent) => void;
            onMousemove?: (payload: MouseEvent) => void;
            onMouseout?: (payload: MouseEvent) => void;
            onMouseover?: (payload: MouseEvent) => void;
            onMouseup?: (payload: MouseEvent) => void;
            onAbort?: (payload: Event) => void;
            onCanplay?: (payload: Event) => void;
            onCanplaythrough?: (payload: Event) => void;
            onDurationchange?: (payload: Event) => void;
            onEmptied?: (payload: Event) => void;
            onEncrypted?: (payload: Event) => void;
            onEnded?: (payload: Event) => void;
            onLoadeddata?: (payload: Event) => void;
            onLoadedmetadata?: (payload: Event) => void;
            onLoadstart?: (payload: Event) => void;
            onPause?: (payload: Event) => void;
            onPlay?: (payload: Event) => void;
            onPlaying?: (payload: Event) => void;
            onProgress?: (payload: Event) => void;
            onRatechange?: (payload: Event) => void;
            onSeeked?: (payload: Event) => void;
            onSeeking?: (payload: Event) => void;
            onStalled?: (payload: Event) => void;
            onSuspend?: (payload: Event) => void;
            onTimeupdate?: (payload: Event) => void;
            onVolumechange?: (payload: Event) => void;
            onWaiting?: (payload: Event) => void;
            onSelect?: (payload: Event) => void;
            onScroll?: (payload: UIEvent) => void;
            onTouchcancel?: (payload: TouchEvent) => void;
            onTouchend?: (payload: TouchEvent) => void;
            onTouchmove?: (payload: TouchEvent) => void;
            onTouchstart?: (payload: TouchEvent) => void;
            onPointerdown?: (payload: PointerEvent) => void;
            onPointermove?: (payload: PointerEvent) => void;
            onPointerup?: (payload: PointerEvent) => void;
            onPointercancel?: (payload: PointerEvent) => void;
            onPointerenter?: (payload: PointerEvent) => void;
            onPointerleave?: (payload: PointerEvent) => void;
            onPointerover?: (payload: PointerEvent) => void;
            onPointerout?: (payload: PointerEvent) => void;
            onWheel?: (payload: WheelEvent) => void;
            onAnimationstart?: (payload: AnimationEvent) => void;
            onAnimationend?: (payload: AnimationEvent) => void;
            onAnimationiteration?: (payload: AnimationEvent) => void;
            onTransitionend?: (payload: TransitionEvent) => void;
            onTransitionstart?: (payload: TransitionEvent) => void;
            role?: string;
            tabindex?: string | number;
            hidden?: boolean | "false" | "true";
            color?: string;
            width?: string | number;
            height?: string | number;
            contextmenu?: string;
            id?: string;
            "aria-hidden"?: boolean | "false" | "true";
            placeholder?: import("../_util/type").VueNode;
            dir?: string;
            wrapperClassName?: string;
            "aria-selected"?: boolean | "false" | "true";
            wrapperStyle?: import("vue").CSSProperties;
            prefix?: string;
            src?: string;
            srcset?: string;
            alt?: string;
            draggable?: boolean | "false" | "true";
            innerHTML?: string;
            accesskey?: string;
            contenteditable?: "inherit" | (boolean | "false" | "true");
            lang?: string;
            spellcheck?: boolean | "false" | "true";
            translate?: "yes" | "no";
            radiogroup?: string;
            about?: string;
            datatype?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autocave?: string;
            itemprop?: string;
            itemscope?: boolean | "false" | "true";
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: string | number;
            security?: string;
            unselectable?: "on" | "off";
            inputmode?: "url" | "email" | "text" | "none" | "search" | "tel" | "numeric" | "decimal";
            is?: string;
            "aria-activedescendant"?: string;
            "aria-atomic"?: boolean | "false" | "true";
            "aria-autocomplete"?: "none" | "both" | "inline" | "list";
            "aria-busy"?: boolean | "false" | "true";
            "aria-checked"?: "mixed" | (boolean | "false" | "true");
            "aria-colcount"?: string | number;
            "aria-colindex"?: string | number;
            "aria-colspan"?: string | number;
            "aria-controls"?: string;
            "aria-current"?: "date" | "time" | "page" | (boolean | "false" | "true") | "step" | "location";
            "aria-describedby"?: string;
            "aria-details"?: string;
            "aria-disabled"?: boolean | "false" | "true";
            "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
            "aria-errormessage"?: string;
            "aria-expanded"?: boolean | "false" | "true";
            "aria-flowto"?: string;
            "aria-grabbed"?: boolean | "false" | "true";
            "aria-haspopup"?: "dialog" | "menu" | "listbox" | "grid" | (boolean | "false" | "true") | "tree";
            "aria-invalid"?: (boolean | "false" | "true") | "grammar" | "spelling";
            "aria-keyshortcuts"?: string;
            "aria-label"?: string;
            "aria-labelledby"?: string;
            "aria-level"?: string | number;
            "aria-live"?: "off" | "polite" | "assertive";
            "aria-modal"?: boolean | "false" | "true";
            "aria-multiline"?: boolean | "false" | "true";
            "aria-multiselectable"?: boolean | "false" | "true";
            "aria-orientation"?: "horizontal" | "vertical";
            "aria-owns"?: string;
            "aria-placeholder"?: string;
            "aria-posinset"?: string | number;
            "aria-pressed"?: "mixed" | (boolean | "false" | "true");
            "aria-readonly"?: boolean | "false" | "true";
            "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
            "aria-required"?: boolean | "false" | "true";
            "aria-roledescription"?: string;
            "aria-rowcount"?: string | number;
            "aria-rowindex"?: string | number;
            "aria-rowspan"?: string | number;
            "aria-setsize"?: string | number;
            "aria-sort"?: "none" | "ascending" | "descending" | "other";
            "aria-valuemax"?: string | number;
            "aria-valuemin"?: string | number;
            "aria-valuenow"?: string | number;
            "aria-valuetext"?: string;
            previewPrefixCls?: string;
            crossorigin?: "" | "anonymous" | "use-credentials";
            decoding?: "auto" | "sync" | "async";
            sizes?: string;
            usemap?: string;
            fallback?: string;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
            class: any;
            inlist: any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        src?: unknown;
        wrapperClassName?: unknown;
        wrapperStyle?: unknown;
        prefixCls?: unknown;
        previewPrefixCls?: unknown;
        placeholder?: unknown;
        fallback?: unknown;
        preview?: unknown;
        style?: unknown;
        class?: unknown;
        title?: unknown;
        onCopy?: unknown;
        onCut?: unknown;
        onPaste?: unknown;
        onCompositionend?: unknown;
        onCompositionstart?: unknown;
        onCompositionupdate?: unknown;
        onDrag?: unknown;
        onDragend?: unknown;
        onDragenter?: unknown;
        onDragexit?: unknown;
        onDragleave?: unknown;
        onDragover?: unknown;
        onDragstart?: unknown;
        onDrop?: unknown;
        onFocus?: unknown;
        onFocusin?: unknown;
        onFocusout?: unknown;
        onBlur?: unknown;
        onChange?: unknown;
        onBeforeinput?: unknown;
        onInput?: unknown;
        onReset?: unknown;
        onSubmit?: unknown;
        onInvalid?: unknown;
        onLoad?: unknown;
        onError?: unknown;
        onKeydown?: unknown;
        onKeypress?: unknown;
        onKeyup?: unknown;
        onAuxclick?: unknown;
        onContextmenu?: unknown;
        onDblclick?: unknown;
        onMousedown?: unknown;
        onMouseenter?: unknown;
        onMouseleave?: unknown;
        onMousemove?: unknown;
        onMouseout?: unknown;
        onMouseover?: unknown;
        onMouseup?: unknown;
        onAbort?: unknown;
        onCanplay?: unknown;
        onCanplaythrough?: unknown;
        onDurationchange?: unknown;
        onEmptied?: unknown;
        onEncrypted?: unknown;
        onEnded?: unknown;
        onLoadeddata?: unknown;
        onLoadedmetadata?: unknown;
        onLoadstart?: unknown;
        onPause?: unknown;
        onPlay?: unknown;
        onPlaying?: unknown;
        onProgress?: unknown;
        onRatechange?: unknown;
        onSeeked?: unknown;
        onSeeking?: unknown;
        onStalled?: unknown;
        onSuspend?: unknown;
        onTimeupdate?: unknown;
        onVolumechange?: unknown;
        onWaiting?: unknown;
        onSelect?: unknown;
        onScroll?: unknown;
        onTouchcancel?: unknown;
        onTouchend?: unknown;
        onTouchmove?: unknown;
        onTouchstart?: unknown;
        onPointerdown?: unknown;
        onPointermove?: unknown;
        onPointerup?: unknown;
        onPointercancel?: unknown;
        onPointerenter?: unknown;
        onPointerleave?: unknown;
        onPointerover?: unknown;
        onPointerout?: unknown;
        onWheel?: unknown;
        onAnimationstart?: unknown;
        onAnimationend?: unknown;
        onAnimationiteration?: unknown;
        onTransitionend?: unknown;
        onTransitionstart?: unknown;
        role?: unknown;
        tabindex?: unknown;
        hidden?: unknown;
        color?: unknown;
        width?: unknown;
        height?: unknown;
        contextmenu?: unknown;
        id?: unknown;
        'aria-hidden'?: unknown;
        dir?: unknown;
        'aria-selected'?: unknown;
        prefix?: unknown;
        srcset?: unknown;
        alt?: unknown;
        draggable?: unknown;
        innerHTML?: unknown;
        accesskey?: unknown;
        contenteditable?: unknown;
        lang?: unknown;
        spellcheck?: unknown;
        translate?: unknown;
        radiogroup?: unknown;
        about?: unknown;
        datatype?: unknown;
        inlist?: unknown;
        property?: unknown;
        resource?: unknown;
        typeof?: unknown;
        vocab?: unknown;
        autocapitalize?: unknown;
        autocorrect?: unknown;
        autocave?: unknown;
        itemprop?: unknown;
        itemscope?: unknown;
        itemtype?: unknown;
        itemid?: unknown;
        itemref?: unknown;
        results?: unknown;
        security?: unknown;
        unselectable?: unknown;
        inputmode?: unknown;
        is?: unknown;
        'aria-activedescendant'?: unknown;
        'aria-atomic'?: unknown;
        'aria-autocomplete'?: unknown;
        'aria-busy'?: unknown;
        'aria-checked'?: unknown;
        'aria-colcount'?: unknown;
        'aria-colindex'?: unknown;
        'aria-colspan'?: unknown;
        'aria-controls'?: unknown;
        'aria-current'?: unknown;
        'aria-describedby'?: unknown;
        'aria-details'?: unknown;
        'aria-disabled'?: unknown;
        'aria-dropeffect'?: unknown;
        'aria-errormessage'?: unknown;
        'aria-expanded'?: unknown;
        'aria-flowto'?: unknown;
        'aria-grabbed'?: unknown;
        'aria-haspopup'?: unknown;
        'aria-invalid'?: unknown;
        'aria-keyshortcuts'?: unknown;
        'aria-label'?: unknown;
        'aria-labelledby'?: unknown;
        'aria-level'?: unknown;
        'aria-live'?: unknown;
        'aria-modal'?: unknown;
        'aria-multiline'?: unknown;
        'aria-multiselectable'?: unknown;
        'aria-orientation'?: unknown;
        'aria-owns'?: unknown;
        'aria-placeholder'?: unknown;
        'aria-posinset'?: unknown;
        'aria-pressed'?: unknown;
        'aria-readonly'?: unknown;
        'aria-relevant'?: unknown;
        'aria-required'?: unknown;
        'aria-roledescription'?: unknown;
        'aria-rowcount'?: unknown;
        'aria-rowindex'?: unknown;
        'aria-rowspan'?: unknown;
        'aria-setsize'?: unknown;
        'aria-sort'?: unknown;
        'aria-valuemax'?: unknown;
        'aria-valuemin'?: unknown;
        'aria-valuenow'?: unknown;
        'aria-valuetext'?: unknown;
        crossorigin?: unknown;
        decoding?: unknown;
        sizes?: unknown;
        usemap?: unknown;
    } & {
        class: any;
        inlist: any;
    } & {
        style?: import("vue").StyleValue;
        preview?: boolean | {
            visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            onVisibleChange: any;
            getContainer: (props: Record<string, unknown>) => never;
        };
        prefixCls?: string;
        title?: string;
        onCopy?: (payload: ClipboardEvent) => void;
        onCut?: (payload: ClipboardEvent) => void;
        onPaste?: (payload: ClipboardEvent) => void;
        onCompositionend?: (payload: CompositionEvent) => void;
        onCompositionstart?: (payload: CompositionEvent) => void;
        onCompositionupdate?: (payload: CompositionEvent) => void;
        onDrag?: (payload: DragEvent) => void;
        onDragend?: (payload: DragEvent) => void;
        onDragenter?: (payload: DragEvent) => void;
        onDragexit?: (payload: DragEvent) => void;
        onDragleave?: (payload: DragEvent) => void;
        onDragover?: (payload: DragEvent) => void;
        onDragstart?: (payload: DragEvent) => void;
        onDrop?: (payload: DragEvent) => void;
        onFocus?: (payload: FocusEvent) => void;
        onFocusin?: (payload: FocusEvent) => void;
        onFocusout?: (payload: FocusEvent) => void;
        onBlur?: (payload: FocusEvent) => void;
        onChange?: (payload: Event) => void;
        onBeforeinput?: (payload: Event) => void;
        onInput?: (payload: Event) => void;
        onReset?: (payload: Event) => void;
        onSubmit?: (payload: Event) => void;
        onInvalid?: (payload: Event) => void;
        onLoad?: (payload: Event) => void;
        onError?: (payload: Event) => void;
        onKeydown?: (payload: KeyboardEvent) => void;
        onKeypress?: (payload: KeyboardEvent) => void;
        onKeyup?: (payload: KeyboardEvent) => void;
        onAuxclick?: (payload: MouseEvent) => void;
        onContextmenu?: (payload: MouseEvent) => void;
        onDblclick?: (payload: MouseEvent) => void;
        onMousedown?: (payload: MouseEvent) => void;
        onMouseenter?: (payload: MouseEvent) => void;
        onMouseleave?: (payload: MouseEvent) => void;
        onMousemove?: (payload: MouseEvent) => void;
        onMouseout?: (payload: MouseEvent) => void;
        onMouseover?: (payload: MouseEvent) => void;
        onMouseup?: (payload: MouseEvent) => void;
        onAbort?: (payload: Event) => void;
        onCanplay?: (payload: Event) => void;
        onCanplaythrough?: (payload: Event) => void;
        onDurationchange?: (payload: Event) => void;
        onEmptied?: (payload: Event) => void;
        onEncrypted?: (payload: Event) => void;
        onEnded?: (payload: Event) => void;
        onLoadeddata?: (payload: Event) => void;
        onLoadedmetadata?: (payload: Event) => void;
        onLoadstart?: (payload: Event) => void;
        onPause?: (payload: Event) => void;
        onPlay?: (payload: Event) => void;
        onPlaying?: (payload: Event) => void;
        onProgress?: (payload: Event) => void;
        onRatechange?: (payload: Event) => void;
        onSeeked?: (payload: Event) => void;
        onSeeking?: (payload: Event) => void;
        onStalled?: (payload: Event) => void;
        onSuspend?: (payload: Event) => void;
        onTimeupdate?: (payload: Event) => void;
        onVolumechange?: (payload: Event) => void;
        onWaiting?: (payload: Event) => void;
        onSelect?: (payload: Event) => void;
        onScroll?: (payload: UIEvent) => void;
        onTouchcancel?: (payload: TouchEvent) => void;
        onTouchend?: (payload: TouchEvent) => void;
        onTouchmove?: (payload: TouchEvent) => void;
        onTouchstart?: (payload: TouchEvent) => void;
        onPointerdown?: (payload: PointerEvent) => void;
        onPointermove?: (payload: PointerEvent) => void;
        onPointerup?: (payload: PointerEvent) => void;
        onPointercancel?: (payload: PointerEvent) => void;
        onPointerenter?: (payload: PointerEvent) => void;
        onPointerleave?: (payload: PointerEvent) => void;
        onPointerover?: (payload: PointerEvent) => void;
        onPointerout?: (payload: PointerEvent) => void;
        onWheel?: (payload: WheelEvent) => void;
        onAnimationstart?: (payload: AnimationEvent) => void;
        onAnimationend?: (payload: AnimationEvent) => void;
        onAnimationiteration?: (payload: AnimationEvent) => void;
        onTransitionend?: (payload: TransitionEvent) => void;
        onTransitionstart?: (payload: TransitionEvent) => void;
        role?: string;
        tabindex?: string | number;
        hidden?: boolean | "false" | "true";
        color?: string;
        width?: string | number;
        height?: string | number;
        contextmenu?: string;
        id?: string;
        "aria-hidden"?: boolean | "false" | "true";
        placeholder?: import("../_util/type").VueNode;
        dir?: string;
        wrapperClassName?: string;
        "aria-selected"?: boolean | "false" | "true";
        wrapperStyle?: import("vue").CSSProperties;
        prefix?: string;
        src?: string;
        srcset?: string;
        alt?: string;
        draggable?: boolean | "false" | "true";
        innerHTML?: string;
        accesskey?: string;
        contenteditable?: "inherit" | (boolean | "false" | "true");
        lang?: string;
        spellcheck?: boolean | "false" | "true";
        translate?: "yes" | "no";
        radiogroup?: string;
        about?: string;
        datatype?: string;
        property?: string;
        resource?: string;
        typeof?: string;
        vocab?: string;
        autocapitalize?: string;
        autocorrect?: string;
        autocave?: string;
        itemprop?: string;
        itemscope?: boolean | "false" | "true";
        itemtype?: string;
        itemid?: string;
        itemref?: string;
        results?: string | number;
        security?: string;
        unselectable?: "on" | "off";
        inputmode?: "url" | "email" | "text" | "none" | "search" | "tel" | "numeric" | "decimal";
        is?: string;
        "aria-activedescendant"?: string;
        "aria-atomic"?: boolean | "false" | "true";
        "aria-autocomplete"?: "none" | "both" | "inline" | "list";
        "aria-busy"?: boolean | "false" | "true";
        "aria-checked"?: "mixed" | (boolean | "false" | "true");
        "aria-colcount"?: string | number;
        "aria-colindex"?: string | number;
        "aria-colspan"?: string | number;
        "aria-controls"?: string;
        "aria-current"?: "date" | "time" | "page" | (boolean | "false" | "true") | "step" | "location";
        "aria-describedby"?: string;
        "aria-details"?: string;
        "aria-disabled"?: boolean | "false" | "true";
        "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
        "aria-errormessage"?: string;
        "aria-expanded"?: boolean | "false" | "true";
        "aria-flowto"?: string;
        "aria-grabbed"?: boolean | "false" | "true";
        "aria-haspopup"?: "dialog" | "menu" | "listbox" | "grid" | (boolean | "false" | "true") | "tree";
        "aria-invalid"?: (boolean | "false" | "true") | "grammar" | "spelling";
        "aria-keyshortcuts"?: string;
        "aria-label"?: string;
        "aria-labelledby"?: string;
        "aria-level"?: string | number;
        "aria-live"?: "off" | "polite" | "assertive";
        "aria-modal"?: boolean | "false" | "true";
        "aria-multiline"?: boolean | "false" | "true";
        "aria-multiselectable"?: boolean | "false" | "true";
        "aria-orientation"?: "horizontal" | "vertical";
        "aria-owns"?: string;
        "aria-placeholder"?: string;
        "aria-posinset"?: string | number;
        "aria-pressed"?: "mixed" | (boolean | "false" | "true");
        "aria-readonly"?: boolean | "false" | "true";
        "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
        "aria-required"?: boolean | "false" | "true";
        "aria-roledescription"?: string;
        "aria-rowcount"?: string | number;
        "aria-rowindex"?: string | number;
        "aria-rowspan"?: string | number;
        "aria-setsize"?: string | number;
        "aria-sort"?: "none" | "ascending" | "descending" | "other";
        "aria-valuemax"?: string | number;
        "aria-valuemin"?: string | number;
        "aria-valuenow"?: string | number;
        "aria-valuetext"?: string;
        previewPrefixCls?: string;
        crossorigin?: "" | "anonymous" | "use-credentials";
        decoding?: "auto" | "sync" | "async";
        sizes?: string;
        usemap?: string;
        fallback?: string;
    }> & import("vue").ShallowUnwrapRef<{}> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    src?: unknown;
    wrapperClassName?: unknown;
    wrapperStyle?: unknown;
    prefixCls?: unknown;
    previewPrefixCls?: unknown;
    placeholder?: unknown;
    fallback?: unknown;
    preview?: unknown;
    style?: unknown;
    class?: unknown;
    title?: unknown;
    onCopy?: unknown;
    onCut?: unknown;
    onPaste?: unknown;
    onCompositionend?: unknown;
    onCompositionstart?: unknown;
    onCompositionupdate?: unknown;
    onDrag?: unknown;
    onDragend?: unknown;
    onDragenter?: unknown;
    onDragexit?: unknown;
    onDragleave?: unknown;
    onDragover?: unknown;
    onDragstart?: unknown;
    onDrop?: unknown;
    onFocus?: unknown;
    onFocusin?: unknown;
    onFocusout?: unknown;
    onBlur?: unknown;
    onChange?: unknown;
    onBeforeinput?: unknown;
    onInput?: unknown;
    onReset?: unknown;
    onSubmit?: unknown;
    onInvalid?: unknown;
    onLoad?: unknown;
    onError?: unknown;
    onKeydown?: unknown;
    onKeypress?: unknown;
    onKeyup?: unknown;
    onAuxclick?: unknown;
    onContextmenu?: unknown;
    onDblclick?: unknown;
    onMousedown?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
    onMousemove?: unknown;
    onMouseout?: unknown;
    onMouseover?: unknown;
    onMouseup?: unknown;
    onAbort?: unknown;
    onCanplay?: unknown;
    onCanplaythrough?: unknown;
    onDurationchange?: unknown;
    onEmptied?: unknown;
    onEncrypted?: unknown;
    onEnded?: unknown;
    onLoadeddata?: unknown;
    onLoadedmetadata?: unknown;
    onLoadstart?: unknown;
    onPause?: unknown;
    onPlay?: unknown;
    onPlaying?: unknown;
    onProgress?: unknown;
    onRatechange?: unknown;
    onSeeked?: unknown;
    onSeeking?: unknown;
    onStalled?: unknown;
    onSuspend?: unknown;
    onTimeupdate?: unknown;
    onVolumechange?: unknown;
    onWaiting?: unknown;
    onSelect?: unknown;
    onScroll?: unknown;
    onTouchcancel?: unknown;
    onTouchend?: unknown;
    onTouchmove?: unknown;
    onTouchstart?: unknown;
    onPointerdown?: unknown;
    onPointermove?: unknown;
    onPointerup?: unknown;
    onPointercancel?: unknown;
    onPointerenter?: unknown;
    onPointerleave?: unknown;
    onPointerover?: unknown;
    onPointerout?: unknown;
    onWheel?: unknown;
    onAnimationstart?: unknown;
    onAnimationend?: unknown;
    onAnimationiteration?: unknown;
    onTransitionend?: unknown;
    onTransitionstart?: unknown;
    role?: unknown;
    tabindex?: unknown;
    hidden?: unknown;
    color?: unknown;
    width?: unknown;
    height?: unknown;
    contextmenu?: unknown;
    id?: unknown;
    'aria-hidden'?: unknown;
    dir?: unknown;
    'aria-selected'?: unknown;
    prefix?: unknown;
    srcset?: unknown;
    alt?: unknown;
    draggable?: unknown;
    innerHTML?: unknown;
    accesskey?: unknown;
    contenteditable?: unknown;
    lang?: unknown;
    spellcheck?: unknown;
    translate?: unknown;
    radiogroup?: unknown;
    about?: unknown;
    datatype?: unknown;
    inlist?: unknown;
    property?: unknown;
    resource?: unknown;
    typeof?: unknown;
    vocab?: unknown;
    autocapitalize?: unknown;
    autocorrect?: unknown;
    autocave?: unknown;
    itemprop?: unknown;
    itemscope?: unknown;
    itemtype?: unknown;
    itemid?: unknown;
    itemref?: unknown;
    results?: unknown;
    security?: unknown;
    unselectable?: unknown;
    inputmode?: unknown;
    is?: unknown;
    'aria-activedescendant'?: unknown;
    'aria-atomic'?: unknown;
    'aria-autocomplete'?: unknown;
    'aria-busy'?: unknown;
    'aria-checked'?: unknown;
    'aria-colcount'?: unknown;
    'aria-colindex'?: unknown;
    'aria-colspan'?: unknown;
    'aria-controls'?: unknown;
    'aria-current'?: unknown;
    'aria-describedby'?: unknown;
    'aria-details'?: unknown;
    'aria-disabled'?: unknown;
    'aria-dropeffect'?: unknown;
    'aria-errormessage'?: unknown;
    'aria-expanded'?: unknown;
    'aria-flowto'?: unknown;
    'aria-grabbed'?: unknown;
    'aria-haspopup'?: unknown;
    'aria-invalid'?: unknown;
    'aria-keyshortcuts'?: unknown;
    'aria-label'?: unknown;
    'aria-labelledby'?: unknown;
    'aria-level'?: unknown;
    'aria-live'?: unknown;
    'aria-modal'?: unknown;
    'aria-multiline'?: unknown;
    'aria-multiselectable'?: unknown;
    'aria-orientation'?: unknown;
    'aria-owns'?: unknown;
    'aria-placeholder'?: unknown;
    'aria-posinset'?: unknown;
    'aria-pressed'?: unknown;
    'aria-readonly'?: unknown;
    'aria-relevant'?: unknown;
    'aria-required'?: unknown;
    'aria-roledescription'?: unknown;
    'aria-rowcount'?: unknown;
    'aria-rowindex'?: unknown;
    'aria-rowspan'?: unknown;
    'aria-setsize'?: unknown;
    'aria-sort'?: unknown;
    'aria-valuemax'?: unknown;
    'aria-valuemin'?: unknown;
    'aria-valuenow'?: unknown;
    'aria-valuetext'?: unknown;
    crossorigin?: unknown;
    decoding?: unknown;
    sizes?: unknown;
    usemap?: unknown;
} & {
    class: any;
    inlist: any;
} & {
    style?: import("vue").StyleValue;
    preview?: boolean | {
        visible: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        onVisibleChange: any;
        getContainer: (props: Record<string, unknown>) => never;
    };
    prefixCls?: string;
    title?: string;
    onCopy?: (payload: ClipboardEvent) => void;
    onCut?: (payload: ClipboardEvent) => void;
    onPaste?: (payload: ClipboardEvent) => void;
    onCompositionend?: (payload: CompositionEvent) => void;
    onCompositionstart?: (payload: CompositionEvent) => void;
    onCompositionupdate?: (payload: CompositionEvent) => void;
    onDrag?: (payload: DragEvent) => void;
    onDragend?: (payload: DragEvent) => void;
    onDragenter?: (payload: DragEvent) => void;
    onDragexit?: (payload: DragEvent) => void;
    onDragleave?: (payload: DragEvent) => void;
    onDragover?: (payload: DragEvent) => void;
    onDragstart?: (payload: DragEvent) => void;
    onDrop?: (payload: DragEvent) => void;
    onFocus?: (payload: FocusEvent) => void;
    onFocusin?: (payload: FocusEvent) => void;
    onFocusout?: (payload: FocusEvent) => void;
    onBlur?: (payload: FocusEvent) => void;
    onChange?: (payload: Event) => void;
    onBeforeinput?: (payload: Event) => void;
    onInput?: (payload: Event) => void;
    onReset?: (payload: Event) => void;
    onSubmit?: (payload: Event) => void;
    onInvalid?: (payload: Event) => void;
    onLoad?: (payload: Event) => void;
    onError?: (payload: Event) => void;
    onKeydown?: (payload: KeyboardEvent) => void;
    onKeypress?: (payload: KeyboardEvent) => void;
    onKeyup?: (payload: KeyboardEvent) => void;
    onAuxclick?: (payload: MouseEvent) => void;
    onContextmenu?: (payload: MouseEvent) => void;
    onDblclick?: (payload: MouseEvent) => void;
    onMousedown?: (payload: MouseEvent) => void;
    onMouseenter?: (payload: MouseEvent) => void;
    onMouseleave?: (payload: MouseEvent) => void;
    onMousemove?: (payload: MouseEvent) => void;
    onMouseout?: (payload: MouseEvent) => void;
    onMouseover?: (payload: MouseEvent) => void;
    onMouseup?: (payload: MouseEvent) => void;
    onAbort?: (payload: Event) => void;
    onCanplay?: (payload: Event) => void;
    onCanplaythrough?: (payload: Event) => void;
    onDurationchange?: (payload: Event) => void;
    onEmptied?: (payload: Event) => void;
    onEncrypted?: (payload: Event) => void;
    onEnded?: (payload: Event) => void;
    onLoadeddata?: (payload: Event) => void;
    onLoadedmetadata?: (payload: Event) => void;
    onLoadstart?: (payload: Event) => void;
    onPause?: (payload: Event) => void;
    onPlay?: (payload: Event) => void;
    onPlaying?: (payload: Event) => void;
    onProgress?: (payload: Event) => void;
    onRatechange?: (payload: Event) => void;
    onSeeked?: (payload: Event) => void;
    onSeeking?: (payload: Event) => void;
    onStalled?: (payload: Event) => void;
    onSuspend?: (payload: Event) => void;
    onTimeupdate?: (payload: Event) => void;
    onVolumechange?: (payload: Event) => void;
    onWaiting?: (payload: Event) => void;
    onSelect?: (payload: Event) => void;
    onScroll?: (payload: UIEvent) => void;
    onTouchcancel?: (payload: TouchEvent) => void;
    onTouchend?: (payload: TouchEvent) => void;
    onTouchmove?: (payload: TouchEvent) => void;
    onTouchstart?: (payload: TouchEvent) => void;
    onPointerdown?: (payload: PointerEvent) => void;
    onPointermove?: (payload: PointerEvent) => void;
    onPointerup?: (payload: PointerEvent) => void;
    onPointercancel?: (payload: PointerEvent) => void;
    onPointerenter?: (payload: PointerEvent) => void;
    onPointerleave?: (payload: PointerEvent) => void;
    onPointerover?: (payload: PointerEvent) => void;
    onPointerout?: (payload: PointerEvent) => void;
    onWheel?: (payload: WheelEvent) => void;
    onAnimationstart?: (payload: AnimationEvent) => void;
    onAnimationend?: (payload: AnimationEvent) => void;
    onAnimationiteration?: (payload: AnimationEvent) => void;
    onTransitionend?: (payload: TransitionEvent) => void;
    onTransitionstart?: (payload: TransitionEvent) => void;
    role?: string;
    tabindex?: string | number;
    hidden?: boolean | "false" | "true";
    color?: string;
    width?: string | number;
    height?: string | number;
    contextmenu?: string;
    id?: string;
    "aria-hidden"?: boolean | "false" | "true";
    placeholder?: import("../_util/type").VueNode;
    dir?: string;
    wrapperClassName?: string;
    "aria-selected"?: boolean | "false" | "true";
    wrapperStyle?: import("vue").CSSProperties;
    prefix?: string;
    src?: string;
    srcset?: string;
    alt?: string;
    draggable?: boolean | "false" | "true";
    innerHTML?: string;
    accesskey?: string;
    contenteditable?: "inherit" | (boolean | "false" | "true");
    lang?: string;
    spellcheck?: boolean | "false" | "true";
    translate?: "yes" | "no";
    radiogroup?: string;
    about?: string;
    datatype?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autocapitalize?: string;
    autocorrect?: string;
    autocave?: string;
    itemprop?: string;
    itemscope?: boolean | "false" | "true";
    itemtype?: string;
    itemid?: string;
    itemref?: string;
    results?: string | number;
    security?: string;
    unselectable?: "on" | "off";
    inputmode?: "url" | "email" | "text" | "none" | "search" | "tel" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "none" | "both" | "inline" | "list";
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: "mixed" | (boolean | "false" | "true");
    "aria-colcount"?: string | number;
    "aria-colindex"?: string | number;
    "aria-colspan"?: string | number;
    "aria-controls"?: string;
    "aria-current"?: "date" | "time" | "page" | (boolean | "false" | "true") | "step" | "location";
    "aria-describedby"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "link" | "none" | "copy" | "move" | "popup" | "execute";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: "dialog" | "menu" | "listbox" | "grid" | (boolean | "false" | "true") | "tree";
    "aria-invalid"?: (boolean | "false" | "true") | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: string | number;
    "aria-live"?: "off" | "polite" | "assertive";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: string | number;
    "aria-pressed"?: "mixed" | (boolean | "false" | "true");
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "text" | "all" | "additions" | "additions text" | "removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: string | number;
    "aria-rowindex"?: string | number;
    "aria-rowspan"?: string | number;
    "aria-setsize"?: string | number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: string | number;
    "aria-valuemin"?: string | number;
    "aria-valuenow"?: string | number;
    "aria-valuetext"?: string;
    previewPrefixCls?: string;
    crossorigin?: "" | "anonymous" | "use-credentials";
    decoding?: "auto" | "sync" | "async";
    sizes?: string;
    usemap?: string;
    fallback?: string;
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {
    class: any;
    inlist: any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly PreviewGroup: typeof PreviewGroup;
};
export default _default;
