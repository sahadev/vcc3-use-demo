import type { Plugin } from 'vue';
import type Column from './Column';
import type ColumnGroup from './ColumnGroup';
export declare const TableColumn: any;
export declare const TableColumnGroup: any;
declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            getPopupContainer: (...args: any[]) => any;
            prefixCls: string;
            transformCellText: (...args: any[]) => any;
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dropdownPrefixCls: string;
            dataSource: unknown[];
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            expandIcon: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }> & Omit<Readonly<{
            prefixCls?: unknown;
            dropdownPrefixCls?: unknown;
            rowSelection?: unknown;
            pagination?: unknown;
            size?: unknown;
            dataSource?: unknown;
            components?: unknown;
            columns?: unknown;
            rowKey?: unknown;
            rowClassName?: unknown;
            expandedRowRender?: unknown;
            defaultExpandAllRows?: unknown;
            defaultExpandedRowKeys?: unknown;
            expandedRowKeys?: unknown;
            expandIconAsCell?: unknown;
            expandIconColumnIndex?: unknown;
            expandRowByClick?: unknown;
            loading?: unknown;
            locale?: unknown;
            indentSize?: unknown;
            customRow?: unknown;
            customHeaderRow?: unknown;
            useFixedHeader?: unknown;
            bordered?: unknown;
            showHeader?: unknown;
            footer?: unknown;
            title?: unknown;
            scroll?: unknown;
            childrenColumnName?: unknown;
            bodyStyle?: unknown;
            sortDirections?: unknown;
            tableLayout?: unknown;
            getPopupContainer?: unknown;
            expandIcon?: unknown;
            transformCellText?: unknown;
            onExpandedRowsChange?: unknown;
            onExpand?: unknown;
            onChange?: unknown;
            onRowClick?: unknown;
        } & {
            prefixCls: string;
            components: {
                [key: string]: any;
            };
            dropdownPrefixCls: string;
            dataSource: unknown[];
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            tableLayout: string;
        } & {
            locale?: {
                filterTitle: (string | ((props: Record<string, unknown>) => string)) & string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: (string | ((props: Record<string, unknown>) => string)) & string;
                expand: (string | ((props: Record<string, unknown>) => string)) & string;
                collapse: (string | ((props: Record<string, unknown>) => string)) & string;
            };
            getPopupContainer?: (...args: any[]) => any;
            transformCellText?: (...args: any[]) => any;
            footer?: (...args: any[]) => any;
            title?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
                spinning: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                size: "default" | "small" | "large";
                wrapperClassName: (string | ((props: Record<string, unknown>) => string)) & string;
                tip: (string | ((props: Record<string, unknown>) => string)) & string;
                delay: (number | ((props: Record<string, unknown>) => number)) & number;
                indicator: any;
            };
            bordered?: boolean;
            pagination?: boolean | Partial<{
                position?: unknown;
                total?: unknown;
                defaultCurrent?: unknown;
                disabled?: unknown;
                current?: unknown;
                defaultPageSize?: unknown;
                pageSize?: unknown;
                hideOnSinglePage?: unknown;
                showSizeChanger?: unknown;
                pageSizeOptions?: unknown;
                buildOptionText?: unknown;
                showSizeChange?: unknown;
                showQuickJumper?: unknown;
                showTotal?: unknown;
                size?: unknown;
                simple?: unknown;
                locale?: unknown;
                prefixCls?: unknown;
                selectPrefixCls?: unknown;
                itemRender?: unknown;
                role?: unknown;
                showLessItems?: unknown;
                onChange?: unknown;
                onShowSizeChange?: unknown;
                'onUpdate:current'?: unknown;
                'onUpdate:pageSize'?: unknown;
            } & {
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                role: string;
                size: string;
                current: number;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                selectPrefixCls: string;
            } & {
                onChange?: (...args: any[]) => any;
                disabled?: boolean;
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                buildOptionText?: (...args: any[]) => any;
                showSizeChange?: (...args: any[]) => any;
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                itemRender?: (...args: any[]) => any;
                showLessItems?: boolean;
                onShowSizeChange?: (...args: any[]) => any;
                "onUpdate:current"?: (...args: any[]) => any;
                "onUpdate:pageSize"?: (...args: any[]) => any;
                position?: "both" | "bottom" | "top";
            }>;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (() => unknown[]);
                getCheckboxProps: any;
                selections: boolean | import("vue-types/dist/types").DefaultFactory<unknown[]>;
                hideDefaultSelections: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                fixed: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            rowKey?: any;
            rowClassName?: (...args: any[]) => any;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            customRow?: (...args: any[]) => any;
            customHeaderRow?: (...args: any[]) => any;
            useFixedHeader?: boolean;
            showHeader?: boolean;
            childrenColumnName?: string | unknown[];
            bodyStyle?: import("vue").CSSProperties;
            expandIcon?: (...args: any[]) => any;
            onExpandedRowsChange?: (...args: any[]) => any;
            onExpand?: (...args: any[]) => any;
            onRowClick?: (...args: any[]) => any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "getPopupContainer" | "prefixCls" | "transformCellText" | "footer" | "title" | "onChange" | "components" | "dropdownPrefixCls" | "dataSource" | "rowClassName" | "defaultExpandedRowKeys" | "expandedRowKeys" | "expandIconColumnIndex" | "indentSize" | "customRow" | "customHeaderRow" | "tableLayout" | "expandIcon" | "onExpandedRowsChange" | "onExpand" | "onRowClick">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls?: unknown;
            dropdownPrefixCls?: unknown;
            rowSelection?: unknown;
            pagination?: unknown;
            size?: unknown;
            dataSource?: unknown;
            components?: unknown;
            columns?: unknown;
            rowKey?: unknown;
            rowClassName?: unknown;
            expandedRowRender?: unknown;
            defaultExpandAllRows?: unknown;
            defaultExpandedRowKeys?: unknown;
            expandedRowKeys?: unknown;
            expandIconAsCell?: unknown;
            expandIconColumnIndex?: unknown;
            expandRowByClick?: unknown;
            loading?: unknown;
            locale?: unknown;
            indentSize?: unknown;
            customRow?: unknown;
            customHeaderRow?: unknown;
            useFixedHeader?: unknown;
            bordered?: unknown;
            showHeader?: unknown;
            footer?: unknown;
            title?: unknown;
            scroll?: unknown;
            childrenColumnName?: unknown;
            bodyStyle?: unknown;
            sortDirections?: unknown;
            tableLayout?: unknown;
            getPopupContainer?: unknown;
            expandIcon?: unknown;
            transformCellText?: unknown;
            onExpandedRowsChange?: unknown;
            onExpand?: unknown;
            onChange?: unknown;
            onRowClick?: unknown;
        } & {
            prefixCls: string;
            components: {
                [key: string]: any;
            };
            dropdownPrefixCls: string;
            dataSource: unknown[];
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            tableLayout: string;
        } & {
            locale?: {
                filterTitle: (string | ((props: Record<string, unknown>) => string)) & string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: (string | ((props: Record<string, unknown>) => string)) & string;
                expand: (string | ((props: Record<string, unknown>) => string)) & string;
                collapse: (string | ((props: Record<string, unknown>) => string)) & string;
            };
            getPopupContainer?: (...args: any[]) => any;
            transformCellText?: (...args: any[]) => any;
            footer?: (...args: any[]) => any;
            title?: (...args: any[]) => any;
            onChange?: (...args: any[]) => any;
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
                spinning: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                size: "default" | "small" | "large";
                wrapperClassName: (string | ((props: Record<string, unknown>) => string)) & string;
                tip: (string | ((props: Record<string, unknown>) => string)) & string;
                delay: (number | ((props: Record<string, unknown>) => number)) & number;
                indicator: any;
            };
            bordered?: boolean;
            pagination?: boolean | Partial<{
                position?: unknown;
                total?: unknown;
                defaultCurrent?: unknown;
                disabled?: unknown;
                current?: unknown;
                defaultPageSize?: unknown;
                pageSize?: unknown;
                hideOnSinglePage?: unknown;
                showSizeChanger?: unknown;
                pageSizeOptions?: unknown;
                buildOptionText?: unknown;
                showSizeChange?: unknown;
                showQuickJumper?: unknown;
                showTotal?: unknown;
                size?: unknown;
                simple?: unknown;
                locale?: unknown;
                prefixCls?: unknown;
                selectPrefixCls?: unknown;
                itemRender?: unknown;
                role?: unknown;
                showLessItems?: unknown;
                onChange?: unknown;
                onShowSizeChange?: unknown;
                'onUpdate:current'?: unknown;
                'onUpdate:pageSize'?: unknown;
            } & {
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                role: string;
                size: string;
                current: number;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                selectPrefixCls: string;
            } & {
                onChange?: (...args: any[]) => any;
                disabled?: boolean;
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                buildOptionText?: (...args: any[]) => any;
                showSizeChange?: (...args: any[]) => any;
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                itemRender?: (...args: any[]) => any;
                showLessItems?: boolean;
                onShowSizeChange?: (...args: any[]) => any;
                "onUpdate:current"?: (...args: any[]) => any;
                "onUpdate:pageSize"?: (...args: any[]) => any;
                position?: "both" | "bottom" | "top";
            }>;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (() => unknown[]);
                getCheckboxProps: any;
                selections: boolean | import("vue-types/dist/types").DefaultFactory<unknown[]>;
                hideDefaultSelections: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                fixed: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            rowKey?: any;
            rowClassName?: (...args: any[]) => any;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            customRow?: (...args: any[]) => any;
            customHeaderRow?: (...args: any[]) => any;
            useFixedHeader?: boolean;
            showHeader?: boolean;
            childrenColumnName?: string | unknown[];
            bodyStyle?: import("vue").CSSProperties;
            expandIcon?: (...args: any[]) => any;
            onExpandedRowsChange?: (...args: any[]) => any;
            onExpand?: (...args: any[]) => any;
            onRowClick?: (...args: any[]) => any;
        }>, unknown, unknown, {}, {
            normalize(elements?: any[]): any[];
            updateColumns(cols?: any[]): any[];
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            getPopupContainer: (...args: any[]) => any;
            prefixCls: string;
            transformCellText: (...args: any[]) => any;
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dropdownPrefixCls: string;
            dataSource: unknown[];
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            expandIcon: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls?: unknown;
        dropdownPrefixCls?: unknown;
        rowSelection?: unknown;
        pagination?: unknown;
        size?: unknown;
        dataSource?: unknown;
        components?: unknown;
        columns?: unknown;
        rowKey?: unknown;
        rowClassName?: unknown;
        expandedRowRender?: unknown;
        defaultExpandAllRows?: unknown;
        defaultExpandedRowKeys?: unknown;
        expandedRowKeys?: unknown;
        expandIconAsCell?: unknown;
        expandIconColumnIndex?: unknown;
        expandRowByClick?: unknown;
        loading?: unknown;
        locale?: unknown;
        indentSize?: unknown;
        customRow?: unknown;
        customHeaderRow?: unknown;
        useFixedHeader?: unknown;
        bordered?: unknown;
        showHeader?: unknown;
        footer?: unknown;
        title?: unknown;
        scroll?: unknown;
        childrenColumnName?: unknown;
        bodyStyle?: unknown;
        sortDirections?: unknown;
        tableLayout?: unknown;
        getPopupContainer?: unknown;
        expandIcon?: unknown;
        transformCellText?: unknown;
        onExpandedRowsChange?: unknown;
        onExpand?: unknown;
        onChange?: unknown;
        onRowClick?: unknown;
    } & {
        prefixCls: string;
        components: {
            [key: string]: any;
        };
        dropdownPrefixCls: string;
        dataSource: unknown[];
        defaultExpandedRowKeys: unknown[];
        expandedRowKeys: unknown[];
        expandIconColumnIndex: number;
        indentSize: number;
        tableLayout: string;
    } & {
        locale?: {
            filterTitle: (string | ((props: Record<string, unknown>) => string)) & string;
            filterConfirm: any;
            filterReset: any;
            emptyText: any;
            selectAll: any;
            selectInvert: any;
            sortTitle: (string | ((props: Record<string, unknown>) => string)) & string;
            expand: (string | ((props: Record<string, unknown>) => string)) & string;
            collapse: (string | ((props: Record<string, unknown>) => string)) & string;
        };
        getPopupContainer?: (...args: any[]) => any;
        transformCellText?: (...args: any[]) => any;
        footer?: (...args: any[]) => any;
        title?: (...args: any[]) => any;
        onChange?: (...args: any[]) => any;
        scroll?: unknown;
        size?: "default" | "small" | "middle" | "large";
        loading?: boolean | {
            prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
            spinning: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            size: "default" | "small" | "large";
            wrapperClassName: (string | ((props: Record<string, unknown>) => string)) & string;
            tip: (string | ((props: Record<string, unknown>) => string)) & string;
            delay: (number | ((props: Record<string, unknown>) => number)) & number;
            indicator: any;
        };
        bordered?: boolean;
        pagination?: boolean | Partial<{
            position?: unknown;
            total?: unknown;
            defaultCurrent?: unknown;
            disabled?: unknown;
            current?: unknown;
            defaultPageSize?: unknown;
            pageSize?: unknown;
            hideOnSinglePage?: unknown;
            showSizeChanger?: unknown;
            pageSizeOptions?: unknown;
            buildOptionText?: unknown;
            showSizeChange?: unknown;
            showQuickJumper?: unknown;
            showTotal?: unknown;
            size?: unknown;
            simple?: unknown;
            locale?: unknown;
            prefixCls?: unknown;
            selectPrefixCls?: unknown;
            itemRender?: unknown;
            role?: unknown;
            showLessItems?: unknown;
            onChange?: unknown;
            onShowSizeChange?: unknown;
            'onUpdate:current'?: unknown;
            'onUpdate:pageSize'?: unknown;
        } & {
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            role: string;
            size: string;
            current: number;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            selectPrefixCls: string;
        } & {
            onChange?: (...args: any[]) => any;
            disabled?: boolean;
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            buildOptionText?: (...args: any[]) => any;
            showSizeChange?: (...args: any[]) => any;
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            itemRender?: (...args: any[]) => any;
            showLessItems?: boolean;
            onShowSizeChange?: (...args: any[]) => any;
            "onUpdate:current"?: (...args: any[]) => any;
            "onUpdate:pageSize"?: (...args: any[]) => any;
            position?: "both" | "bottom" | "top";
        }>;
        sortDirections?: import("./interface").SortOrder[];
        rowSelection?: {
            [key: string]: any;
        } | {
            type: "checkbox" | "radio";
            selectedRowKeys: unknown[] | (() => unknown[]);
            getCheckboxProps: any;
            selections: boolean | import("vue-types/dist/types").DefaultFactory<unknown[]>;
            hideDefaultSelections: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            fixed: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
            columnWidth: string | number;
            selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
            columnTitle: any;
        };
        columns?: unknown;
        rowKey?: any;
        rowClassName?: (...args: any[]) => any;
        expandedRowRender?: any;
        defaultExpandAllRows?: boolean;
        expandIconAsCell?: boolean;
        expandRowByClick?: boolean;
        customRow?: (...args: any[]) => any;
        customHeaderRow?: (...args: any[]) => any;
        useFixedHeader?: boolean;
        showHeader?: boolean;
        childrenColumnName?: string | unknown[];
        bodyStyle?: import("vue").CSSProperties;
        expandIcon?: (...args: any[]) => any;
        onExpandedRowsChange?: (...args: any[]) => any;
        onExpand?: (...args: any[]) => any;
        onRowClick?: (...args: any[]) => any;
    }> & import("vue").ShallowUnwrapRef<{}> & {} & {} & {
        normalize(elements?: any[]): any[];
        updateColumns(cols?: any[]): any[];
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls?: unknown;
    dropdownPrefixCls?: unknown;
    rowSelection?: unknown;
    pagination?: unknown;
    size?: unknown;
    dataSource?: unknown;
    components?: unknown;
    columns?: unknown;
    rowKey?: unknown;
    rowClassName?: unknown;
    expandedRowRender?: unknown;
    defaultExpandAllRows?: unknown;
    defaultExpandedRowKeys?: unknown;
    expandedRowKeys?: unknown;
    expandIconAsCell?: unknown;
    expandIconColumnIndex?: unknown;
    expandRowByClick?: unknown;
    loading?: unknown;
    locale?: unknown;
    indentSize?: unknown;
    customRow?: unknown;
    customHeaderRow?: unknown;
    useFixedHeader?: unknown;
    bordered?: unknown;
    showHeader?: unknown;
    footer?: unknown;
    title?: unknown;
    scroll?: unknown;
    childrenColumnName?: unknown;
    bodyStyle?: unknown;
    sortDirections?: unknown;
    tableLayout?: unknown;
    getPopupContainer?: unknown;
    expandIcon?: unknown;
    transformCellText?: unknown;
    onExpandedRowsChange?: unknown;
    onExpand?: unknown;
    onChange?: unknown;
    onRowClick?: unknown;
} & {
    prefixCls: string;
    components: {
        [key: string]: any;
    };
    dropdownPrefixCls: string;
    dataSource: unknown[];
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    tableLayout: string;
} & {
    locale?: {
        filterTitle: (string | ((props: Record<string, unknown>) => string)) & string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: (string | ((props: Record<string, unknown>) => string)) & string;
        expand: (string | ((props: Record<string, unknown>) => string)) & string;
        collapse: (string | ((props: Record<string, unknown>) => string)) & string;
    };
    getPopupContainer?: (...args: any[]) => any;
    transformCellText?: (...args: any[]) => any;
    footer?: (...args: any[]) => any;
    title?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    scroll?: unknown;
    size?: "default" | "small" | "middle" | "large";
    loading?: boolean | {
        prefixCls: (string | ((props: Record<string, unknown>) => string)) & string;
        spinning: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        size: "default" | "small" | "large";
        wrapperClassName: (string | ((props: Record<string, unknown>) => string)) & string;
        tip: (string | ((props: Record<string, unknown>) => string)) & string;
        delay: (number | ((props: Record<string, unknown>) => number)) & number;
        indicator: any;
    };
    bordered?: boolean;
    pagination?: boolean | Partial<{
        position?: unknown;
        total?: unknown;
        defaultCurrent?: unknown;
        disabled?: unknown;
        current?: unknown;
        defaultPageSize?: unknown;
        pageSize?: unknown;
        hideOnSinglePage?: unknown;
        showSizeChanger?: unknown;
        pageSizeOptions?: unknown;
        buildOptionText?: unknown;
        showSizeChange?: unknown;
        showQuickJumper?: unknown;
        showTotal?: unknown;
        size?: unknown;
        simple?: unknown;
        locale?: unknown;
        prefixCls?: unknown;
        selectPrefixCls?: unknown;
        itemRender?: unknown;
        role?: unknown;
        showLessItems?: unknown;
        onChange?: unknown;
        onShowSizeChange?: unknown;
        'onUpdate:current'?: unknown;
        'onUpdate:pageSize'?: unknown;
    } & {
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        role: string;
        size: string;
        current: number;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        selectPrefixCls: string;
    } & {
        onChange?: (...args: any[]) => any;
        disabled?: boolean;
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        buildOptionText?: (...args: any[]) => any;
        showSizeChange?: (...args: any[]) => any;
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        itemRender?: (...args: any[]) => any;
        showLessItems?: boolean;
        onShowSizeChange?: (...args: any[]) => any;
        "onUpdate:current"?: (...args: any[]) => any;
        "onUpdate:pageSize"?: (...args: any[]) => any;
        position?: "both" | "bottom" | "top";
    }>;
    sortDirections?: import("./interface").SortOrder[];
    rowSelection?: {
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (() => unknown[]);
        getCheckboxProps: any;
        selections: boolean | import("vue-types/dist/types").DefaultFactory<unknown[]>;
        hideDefaultSelections: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        fixed: (boolean | ((props: Record<string, unknown>) => boolean)) & boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    };
    columns?: unknown;
    rowKey?: any;
    rowClassName?: (...args: any[]) => any;
    expandedRowRender?: any;
    defaultExpandAllRows?: boolean;
    expandIconAsCell?: boolean;
    expandRowByClick?: boolean;
    customRow?: (...args: any[]) => any;
    customHeaderRow?: (...args: any[]) => any;
    useFixedHeader?: boolean;
    showHeader?: boolean;
    childrenColumnName?: string | unknown[];
    bodyStyle?: import("vue").CSSProperties;
    expandIcon?: (...args: any[]) => any;
    onExpandedRowsChange?: (...args: any[]) => any;
    onExpand?: (...args: any[]) => any;
    onRowClick?: (...args: any[]) => any;
}>, unknown, unknown, {}, {
    normalize(elements?: any[]): any[];
    updateColumns(cols?: any[]): any[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    getPopupContainer: (...args: any[]) => any;
    prefixCls: string;
    transformCellText: (...args: any[]) => any;
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dropdownPrefixCls: string;
    dataSource: unknown[];
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    expandIcon: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Plugin & {
    readonly Column: typeof Column;
    readonly ColumnGroup: typeof ColumnGroup;
};
export default _default;
