{"version":3,"file":"basic-month-table.vue_vue_type_script_lang.mjs","sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    class=\"el-month-table\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody>\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td v-for=\"(cell, key_) in row\" :key=\"key_\" :class=\"getCellStyle(cell)\">\n          <div>\n            <a class=\"cell\">{{\n              t('el.datepicker.months.' + months[cell.text])\n            }}</a>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { hasClass } from '@element-plus/utils/dom'\nimport { coerceTruthyValueToArray } from '@element-plus/utils/util'\n\nimport type { PropType } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nexport default defineComponent({\n  props: {\n    disabledDate: {\n      type: Function as PropType<(_: Date) => void>,\n    },\n    selectionMode: {\n      type: String,\n      default: 'month',\n    },\n    minDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    maxDate: {\n      type: Object as PropType<Dayjs>,\n    },\n    date: {\n      type: Object as PropType<Dayjs>,\n    },\n    parsedValue: {\n      type: Object as PropType<Dayjs>,\n    },\n    rangeState: {\n      type: Object,\n      default: () => ({\n        endDate: null,\n        selecting: false,\n      }),\n    },\n  },\n\n  emits: ['changerange', 'pick', 'select'],\n\n  setup(props, ctx) {\n    const { t, lang } = useLocale()\n    const months = ref(\n      props.date\n        .locale('en')\n        .localeData()\n        .monthsShort()\n        .map((_) => _.toLowerCase())\n    )\n    const tableRows = ref([[], [], []])\n    const lastRow = ref(null)\n    const lastColumn = ref(null)\n    const rows = computed(() => {\n      // TODO: refactory rows / getCellClasses\n      const rows = tableRows.value\n      const now = dayjs().locale(lang.value).startOf('month')\n\n      for (let i = 0; i < 3; i++) {\n        const row = rows[i]\n        for (let j = 0; j < 4; j++) {\n          let cell = row[j]\n          if (!cell) {\n            cell = {\n              row: i,\n              column: j,\n              type: 'normal',\n              inRange: false,\n              start: false,\n              end: false,\n            }\n          }\n\n          cell.type = 'normal'\n\n          const index = i * 4 + j\n          const calTime = props.date.startOf('year').month(index)\n\n          const calEndDate =\n            props.rangeState.endDate ||\n            props.maxDate ||\n            (props.rangeState.selecting && props.minDate)\n\n          cell.inRange =\n            (props.minDate &&\n              calTime.isSameOrAfter(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrBefore(calEndDate, 'month')) ||\n            (props.minDate &&\n              calTime.isSameOrBefore(props.minDate, 'month') &&\n              calEndDate &&\n              calTime.isSameOrAfter(calEndDate, 'month'))\n\n          if (props.minDate?.isSameOrAfter(calEndDate)) {\n            cell.start = calEndDate && calTime.isSame(calEndDate, 'month')\n            cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n          } else {\n            cell.start = props.minDate && calTime.isSame(props.minDate, 'month')\n            cell.end = calEndDate && calTime.isSame(calEndDate, 'month')\n          }\n\n          const isToday = now.isSame(calTime)\n\n          if (isToday) {\n            cell.type = 'today'\n          }\n          cell.text = index\n          const cellDate = calTime.toDate()\n          cell.disabled = props.disabledDate && props.disabledDate(cellDate)\n          row[j] = cell\n        }\n      }\n      return rows\n    })\n    const getCellStyle = (cell) => {\n      const style = {} as any\n      const year = props.date.year()\n      const today = new Date()\n      const month = cell.text\n\n      style.disabled = props.disabledDate\n        ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n        : false\n      style.current =\n        coerceTruthyValueToArray(props.parsedValue).findIndex(\n          (date) => date.year() === year && date.month() === month\n        ) >= 0\n      style.today = today.getFullYear() === year && today.getMonth() === month\n\n      if (cell.inRange) {\n        style['in-range'] = true\n\n        if (cell.start) {\n          style['start-date'] = true\n        }\n\n        if (cell.end) {\n          style['end-date'] = true\n        }\n      }\n      return style\n    }\n\n    const handleMouseMove = (event) => {\n      if (!props.rangeState.selecting) return\n\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n\n      const row = target.parentNode.rowIndex\n      const column = target.cellIndex\n      // can not select disabled date\n      if (rows.value[row][column].disabled) return\n\n      // only update rangeState when mouse moves to a new cell\n      // this avoids frequent Date object creation and improves performance\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row\n        lastColumn.value = column\n        ctx.emit('changerange', {\n          selecting: true,\n          endDate: props.date.startOf('year').month(row * 4 + column),\n        })\n      }\n    }\n    const handleMonthTableClick = (event) => {\n      let target = event.target\n      if (target.tagName === 'A') {\n        target = target.parentNode.parentNode\n      }\n      if (target.tagName === 'DIV') {\n        target = target.parentNode\n      }\n      if (target.tagName !== 'TD') return\n      if (hasClass(target, 'disabled')) return\n      const column = target.cellIndex\n      const row = target.parentNode.rowIndex\n      const month = row * 4 + column\n      const newDate = props.date.startOf('year').month(month)\n      if (props.selectionMode === 'range') {\n        if (!props.rangeState.selecting) {\n          ctx.emit('pick', { minDate: newDate, maxDate: null })\n          ctx.emit('select', true)\n        } else {\n          if (newDate >= props.minDate) {\n            ctx.emit('pick', { minDate: props.minDate, maxDate: newDate })\n          } else {\n            ctx.emit('pick', { minDate: newDate, maxDate: props.minDate })\n          }\n          ctx.emit('select', false)\n        }\n      } else {\n        ctx.emit('pick', month)\n      }\n    }\n\n    return {\n      handleMouseMove,\n      handleMonthTableClick,\n      rows,\n      getCellStyle,\n      t,\n      months,\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":"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"}