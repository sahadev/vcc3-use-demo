{"version":3,"file":"index.vue_vue_type_script_lang.mjs","sources":["../../../../../../packages/components/descriptions/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      class=\"el-descriptions__header\"\n    >\n      <div class=\"el-descriptions__title\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div class=\"el-descriptions__extra\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div class=\"el-descriptions__body\">\n      <table :class=\"['el-descriptions__table', { 'is-bordered': border }]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, provide } from 'vue'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { useSize } from '@element-plus/hooks'\nimport DescriptionsRow from './descriptions-row.vue'\nimport { elDescriptionsKey } from './token'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElDescriptions',\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow,\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false,\n    },\n    column: {\n      type: Number,\n      default: 3,\n    },\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    extra: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, { slots }) {\n    provide(elDescriptionsKey, props)\n\n    const descriptionsSize = useSize()\n\n    const prefix = 'el-descriptions'\n    const descriptionKls = computed(() => [\n      prefix,\n      descriptionsSize.value ? `${prefix}--${descriptionsSize.value}` : '',\n    ])\n\n    const flattedChildren = (children) => {\n      const temp = Array.isArray(children) ? children : [children]\n      const res = []\n      temp.forEach((child) => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children))\n        } else {\n          res.push(child)\n        }\n      })\n      return res\n    }\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {}\n      }\n      if (span > count) {\n        node.props.span = count\n      }\n      if (isLast) {\n        // set the last span\n        node.props.span = span\n      }\n      return node\n    }\n\n    const getRows = () => {\n      const children = flattedChildren(slots.default?.()).filter(\n        (node) => node?.type?.name === 'ElDescriptionsItem'\n      )\n      const rows = []\n      let temp = []\n      let count = props.column\n      let totalSpan = 0 // all spans number of item\n\n      children.forEach((node, index) => {\n        const span = node.props?.span || 1\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span\n        }\n\n        if (index === children.length - 1) {\n          // calculate the last item span\n          const lastSpan = props.column - (totalSpan % props.column)\n          temp.push(filledNode(node, lastSpan, count, true))\n          rows.push(temp)\n          return\n        }\n\n        if (span < count) {\n          count -= span\n          temp.push(node)\n        } else {\n          temp.push(filledNode(node, span, count))\n          rows.push(temp)\n          count = props.column\n          temp = []\n        }\n      })\n\n      return rows\n    }\n\n    return {\n      descriptionKls,\n      getRows,\n    }\n  },\n})\n</script>\n"],"names":["DescriptionsRow"],"mappings":";;;;;;;;AA+BA,aAAe,eAAe,CAAC;;AAE/B,EAAE,UAAU,EAAE;AACd,IAAI,CAACA,QAAe,CAAC,IAAI,GAAGA,QAAe;;AAE3C,EAAE,KAAK,EAAE;IACL,MAAM,EAAE;MACN,IAAI,EAAE;MACN,OAAO,EAAE,KAAK;;IAEhB;MACE,IAAI,EAAE;MACN,OAAO,EAAE,CAAC;;IAEZ;MACE,IAAI,EAAE;MACN,OAAO,EAAE;;IAEX;MACE,IAAI,EAAE;MACN,SAAS,EAAE,oBAAoB;;IAEjC;MACE,IAAI;MACJ,OAAO,EAAE,EAAE;;IAEb;MACE;MACA,OAAO,EAAE,EAAE;;;OAGV,CAAC;YACI;UACF;IACN;;MAEE,MAAM;MACN,gBAAgB,CAAC,KAAK,GAAG,CAAC,EAAE;;IAE9B,MAAM,eAAe,IAAI,QAAQ;;MAE/B,MAAM,GAAG,KAAK,CAAC;MACf,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;QACtB,IAAI;UACF,GAAG,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;;;;OAIhD,CAAC,CAAC;MACH,OAAO,GAAG;MACV;oBACc,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;UACjC,CAAC,IAAI,CAAC,KAAK,EAAE;QACf,IAAI,CAAC;;;;OAIN;;;OAGA;MACD,OAAO,IAAI,CAAC;;;MAGZ,IAAI,EAAE,CAAC;YACD,QAAQ;;eAEL,CAAC;QACR,CAAC;YACG,IAAI,GAAG,EAAE,CAAC;MAChB;MACA,IAAI,KAAK;;;QAGP,IAAI,GAAG,CAAC;QACR,MAAM,IAAI,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC;QACxD,IAAI,QAAQ,QAAQ,CAAC,MAAM,IAAI,EAAE;;SAEhC;QACD,IAAI,KAAK;UACP,MAAM,QAAQ,GAAG;UACjB,IAAI,CAAC,KAAK,WAAW,IAAI,EAAE,QAAQ,EAAE;;UAErC,OAAO;SACR;;eAEM,QAAQ,CAAC;UACd,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;;;cAGZ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;UAChB,KAAK,GAAG,KAAK,CAAC,MAAM;UACpB,IAAI,GAAG,EAAE,CAAC;;;aAGP;;;oBAGO;aACP;;;;;;;"}