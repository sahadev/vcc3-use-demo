export declare const ElDropdown: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly type: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<import("../../utils/props").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>>, unknown, unknown, unknown, unknown>;
    readonly placement: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<import("@popperjs/core").Placement>, "bottom", unknown, unknown, unknown>;
    readonly size: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly splitButton: BooleanConstructor;
    readonly hideOnClick: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly loop: import("../../utils/props").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
    readonly showTimeout: import("../../utils/props").BuildPropReturn<NumberConstructor, 150, unknown, unknown, unknown>;
    readonly hideTimeout: import("../../utils/props").BuildPropReturn<NumberConstructor, 150, unknown, unknown, unknown>;
    readonly tabindex: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<string | number>, 0, unknown, unknown, unknown>;
    readonly maxHeight: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<string | number>, "", unknown, unknown, unknown>;
    readonly popperClass: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly trigger: {
        type: import("vue").PropType<"click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[]>;
        default: string;
    };
    readonly effect: {
        readonly default: "light";
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: ((val: unknown) => boolean) | undefined;
        readonly __elPropsReservedKey: true;
    };
}, {
    visible: import("vue").Ref<boolean>;
    scrollbar: import("vue").Ref<null>;
    wrapStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    dropdownTriggerKls: import("vue").ComputedRef<string[][]>;
    dropdownSize: import("vue").ComputedRef<import("../../utils/types").ComponentSize>;
    currentTabId: import("vue").Ref<string | null>;
    handleCurrentTabIdChange: (id: string) => void;
    handlerMainButtonClick: (event: MouseEvent) => void;
    handleEntryFocus: (e: Event) => void;
    onMountOnFocus: (e: Event) => void;
    popperRef: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<import("@popperjs/core").Options>;
            strategy: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            virtualRef: import("..").Measurable;
            virtualTriggering: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            openDelay: number;
            visibleArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        }> & Omit<Readonly<{
            openDelay?: unknown;
            visibleArrow?: unknown;
            hideAfter?: unknown;
            showArrow?: unknown;
            arrowOffset?: unknown;
            disabled?: unknown;
            trigger?: unknown;
            virtualRef?: unknown;
            virtualTriggering?: unknown;
            content?: unknown;
            rawContent?: unknown;
            persistent?: unknown;
            ariaLabel?: unknown;
            visible?: unknown;
            transition?: unknown;
            teleported?: unknown;
            style?: unknown;
            className?: unknown;
            effect?: unknown;
            enterable?: unknown;
            pure?: unknown;
            popperClass?: unknown;
            popperStyle?: unknown;
            referenceEl?: unknown;
            stopPopperMouseEvent?: unknown;
            zIndex?: unknown;
            boundariesPadding?: unknown;
            fallbackPlacements?: unknown;
            gpuAcceleration?: unknown;
            offset?: unknown;
            placement?: unknown;
            popperOptions?: unknown;
            strategy?: unknown;
            showAfter?: unknown;
        } & {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<import("@popperjs/core").Options>;
            strategy: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            openDelay: number;
            visibleArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        } & {
            zIndex?: number | undefined;
            ariaLabel?: string | undefined;
            virtualRef?: import("..").Measurable | undefined;
            virtualTriggering?: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "style" | "transition" | "offset" | "visible" | "content" | "effect" | "arrowOffset" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "placement" | "popperOptions" | "strategy" | "className" | "enterable" | "pure" | "popperClass" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "showAfter" | "hideAfter" | "rawContent" | "persistent" | "teleported" | "trigger" | "virtualRef" | "virtualTriggering" | "openDelay" | "visibleArrow" | "showArrow">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            openDelay?: unknown;
            visibleArrow?: unknown;
            hideAfter?: unknown;
            showArrow?: unknown;
            arrowOffset?: unknown;
            disabled?: unknown;
            trigger?: unknown;
            virtualRef?: unknown;
            virtualTriggering?: unknown;
            content?: unknown;
            rawContent?: unknown;
            persistent?: unknown;
            ariaLabel?: unknown;
            visible?: unknown;
            transition?: unknown;
            teleported?: unknown;
            style?: unknown;
            className?: unknown;
            effect?: unknown;
            enterable?: unknown;
            pure?: unknown;
            popperClass?: unknown;
            popperStyle?: unknown;
            referenceEl?: unknown;
            stopPopperMouseEvent?: unknown;
            zIndex?: unknown;
            boundariesPadding?: unknown;
            fallbackPlacements?: unknown;
            gpuAcceleration?: unknown;
            offset?: unknown;
            placement?: unknown;
            popperOptions?: unknown;
            strategy?: unknown;
            showAfter?: unknown;
        } & {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<import("@popperjs/core").Options>;
            strategy: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            openDelay: number;
            visibleArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        } & {
            zIndex?: number | undefined;
            ariaLabel?: string | undefined;
            virtualRef?: import("..").Measurable | undefined;
            virtualTriggering?: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            compatShowAfter: import("vue").ComputedRef<number>;
            compatShowArrow: import("vue").ComputedRef<import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>>;
            popperRef: import("vue").Ref<({
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{}> & Omit<Readonly<{} & {} & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<{} & {} & {}>, import("..").ElPopperInjectionContext, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {}> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<{} & {} & {}> & import("vue").ShallowUnwrapRef<import("..").ElPopperInjectionContext> & {} & {} & import("vue").ComponentCustomProperties) | null>;
            open: import("vue").Ref<boolean>;
            updatePopper: () => void;
            onOpen: () => void;
            onClose: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<import("@popperjs/core").Options>;
            strategy: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            virtualRef: import("..").Measurable;
            virtualTriggering: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            openDelay: number;
            visibleArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        openDelay?: unknown;
        visibleArrow?: unknown;
        hideAfter?: unknown;
        showArrow?: unknown;
        arrowOffset?: unknown;
        disabled?: unknown;
        trigger?: unknown;
        virtualRef?: unknown;
        virtualTriggering?: unknown;
        content?: unknown;
        rawContent?: unknown;
        persistent?: unknown;
        ariaLabel?: unknown;
        visible?: unknown;
        transition?: unknown;
        teleported?: unknown;
        style?: unknown;
        className?: unknown;
        effect?: unknown;
        enterable?: unknown;
        pure?: unknown;
        popperClass?: unknown;
        popperStyle?: unknown;
        referenceEl?: unknown;
        stopPopperMouseEvent?: unknown;
        zIndex?: unknown;
        boundariesPadding?: unknown;
        fallbackPlacements?: unknown;
        gpuAcceleration?: unknown;
        offset?: unknown;
        placement?: unknown;
        popperOptions?: unknown;
        strategy?: unknown;
        showAfter?: unknown;
    } & {
        disabled: boolean;
        style: import("vue").StyleValue;
        transition: string;
        offset: number;
        visible: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
        content: string;
        effect: string;
        arrowOffset: number;
        boundariesPadding: number;
        fallbackPlacements: import("@popperjs/core").Placement[];
        gpuAcceleration: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
        placement: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
        popperOptions: Partial<import("@popperjs/core").Options>;
        strategy: import("../../utils/props").BuildPropType<(new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
        className: string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        enterable: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        pure: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        popperClass: string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        popperStyle: import("vue").StyleValue;
        referenceEl: HTMLElement;
        stopPopperMouseEvent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showAfter: number;
        hideAfter: number;
        rawContent: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        persistent: boolean;
        teleported: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
        openDelay: number;
        visibleArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showArrow: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    } & {
        zIndex?: number | undefined;
        ariaLabel?: string | undefined;
        virtualRef?: import("..").Measurable | undefined;
        virtualTriggering?: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        compatShowAfter: import("vue").ComputedRef<number>;
        compatShowArrow: import("vue").ComputedRef<import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>>;
        popperRef: import("vue").Ref<({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{}> & Omit<Readonly<{} & {} & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<{} & {} & {}>, import("..").ElPopperInjectionContext, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<{} & {} & {}> & import("vue").ShallowUnwrapRef<import("..").ElPopperInjectionContext> & {} & {} & import("vue").ComponentCustomProperties) | null>;
        open: import("vue").Ref<boolean>;
        updatePopper: () => void;
        onOpen: () => void;
        onClose: () => void;
    }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
    triggeringElementRef: import("vue").Ref<any>;
    referenceElementRef: import("vue").Ref<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "visible-change" | "command")[], "click" | "visible-change" | "command", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly type?: unknown;
    readonly placement?: unknown;
    readonly size?: unknown;
    readonly splitButton?: unknown;
    readonly hideOnClick?: unknown;
    readonly loop?: unknown;
    readonly showTimeout?: unknown;
    readonly hideTimeout?: unknown;
    readonly tabindex?: unknown;
    readonly maxHeight?: unknown;
    readonly popperClass?: unknown;
    readonly trigger?: unknown;
    readonly effect?: unknown;
} & {
    size: string;
    effect: string;
    maxHeight: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | number>, unknown, unknown>;
    placement: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<import("@popperjs/core").Placement>, unknown, unknown>;
    popperClass: string;
    trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
    tabindex: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | number>, unknown, unknown>;
    hideOnClick: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    showTimeout: number;
    hideTimeout: number;
    splitButton: boolean;
} & {
    type?: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<import("../../utils/props").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>>, unknown, unknown> | undefined;
    loop?: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onVisible-change"?: ((...args: any[]) => any) | undefined;
    onCommand?: ((...args: any[]) => any) | undefined;
}, {
    type: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<import("../../utils/props").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>>, unknown, unknown>;
    size: string;
    effect: string;
    maxHeight: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | number>, unknown, unknown>;
    placement: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<import("@popperjs/core").Placement>, unknown, unknown>;
    popperClass: string;
    trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
    tabindex: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | number>, unknown, unknown>;
    loop: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    hideOnClick: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    showTimeout: number;
    hideTimeout: number;
    splitButton: boolean;
}>> & {
    DropdownItem: import("vue").DefineComponent<{
        readonly command: import("../../utils/props").BuildPropReturn<readonly [ObjectConstructor, StringConstructor, NumberConstructor], () => {}, unknown, unknown, unknown>;
        readonly disabled: BooleanConstructor;
        readonly divided: BooleanConstructor;
        readonly textValue: StringConstructor;
        readonly icon: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown, unknown, unknown>;
    }, {
        handleClick: (e: UIEvent) => void;
        handlePointerMove: (event: PointerEvent) => void;
        handlePointerLeave: (event: PointerEvent) => void;
        textContent: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("pointerleave" | "pointermove")[], "pointerleave" | "pointermove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly command?: unknown;
        readonly disabled?: unknown;
        readonly divided?: unknown;
        readonly textValue?: unknown;
        readonly icon?: unknown;
    } & {
        disabled: boolean;
        command: import("../../utils/props").BuildPropType<readonly [ObjectConstructor, StringConstructor, NumberConstructor], unknown, unknown>;
        divided: boolean;
    } & {
        icon?: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown> | undefined;
        textValue?: string | undefined;
    }> & {
        onPointermove?: ((...args: any[]) => any) | undefined;
        onPointerleave?: ((...args: any[]) => any) | undefined;
    }, {
        icon: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        disabled: boolean;
        command: import("../../utils/props").BuildPropType<readonly [ObjectConstructor, StringConstructor, NumberConstructor], unknown, unknown>;
        divided: boolean;
    }>;
    DropdownMenu: import("vue").DefineComponent<{
        onKeydown: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<(e: KeyboardEvent) => void>, unknown, unknown, unknown, unknown>;
    }, {
        size: import("vue").ComputedRef<string> | undefined;
        rovingFocusGroupRootStyle: import("vue").Ref<import("vue").StyleValue>;
        tabIndex: import("vue").Ref<number>;
        dropdownListWrapperRef: (el: Element | import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null) => void;
        handleKeydown: (e: KeyboardEvent) => void;
        onBlur: (e: Event) => void;
        onFocus: (e: FocusEvent) => void;
        onMousedown: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        onKeydown?: unknown;
    } & {} & {
        onKeydown?: ((e: KeyboardEvent) => void) | undefined;
    }>, {
        onKeydown: (e: KeyboardEvent) => void;
    }>;
};
export default ElDropdown;
export declare const ElDropdownItem: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly command: import("../../utils/props").BuildPropReturn<readonly [ObjectConstructor, StringConstructor, NumberConstructor], () => {}, unknown, unknown, unknown>;
    readonly disabled: BooleanConstructor;
    readonly divided: BooleanConstructor;
    readonly textValue: StringConstructor;
    readonly icon: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown, unknown, unknown>;
}, {
    handleClick: (e: UIEvent) => void;
    handlePointerMove: (event: PointerEvent) => void;
    handlePointerLeave: (event: PointerEvent) => void;
    textContent: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("pointerleave" | "pointermove")[], "pointerleave" | "pointermove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly command?: unknown;
    readonly disabled?: unknown;
    readonly divided?: unknown;
    readonly textValue?: unknown;
    readonly icon?: unknown;
} & {
    disabled: boolean;
    command: import("../../utils/props").BuildPropType<readonly [ObjectConstructor, StringConstructor, NumberConstructor], unknown, unknown>;
    divided: boolean;
} & {
    icon?: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown> | undefined;
    textValue?: string | undefined;
}> & {
    onPointermove?: ((...args: any[]) => any) | undefined;
    onPointerleave?: ((...args: any[]) => any) | undefined;
}, {
    icon: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    disabled: boolean;
    command: import("../../utils/props").BuildPropType<readonly [ObjectConstructor, StringConstructor, NumberConstructor], unknown, unknown>;
    divided: boolean;
}>>;
export declare const ElDropdownMenu: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    onKeydown: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<(e: KeyboardEvent) => void>, unknown, unknown, unknown, unknown>;
}, {
    size: import("vue").ComputedRef<string> | undefined;
    rovingFocusGroupRootStyle: import("vue").Ref<import("vue").StyleValue>;
    tabIndex: import("vue").Ref<number>;
    dropdownListWrapperRef: (el: Element | import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null) => void;
    handleKeydown: (e: KeyboardEvent) => void;
    onBlur: (e: Event) => void;
    onFocus: (e: FocusEvent) => void;
    onMousedown: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    onKeydown?: unknown;
} & {} & {
    onKeydown?: ((e: KeyboardEvent) => void) | undefined;
}>, {
    onKeydown: (e: KeyboardEvent) => void;
}>>;
