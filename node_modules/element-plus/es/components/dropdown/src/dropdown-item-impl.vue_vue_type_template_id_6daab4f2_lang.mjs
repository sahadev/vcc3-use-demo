import { resolveComponent, openBlock, createElementBlock, mergeProps, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, renderSlot } from 'vue';

const _hoisted_1 = ["aria-disabled", "tabindex"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = resolveComponent("el-icon");
  return openBlock(), createElementBlock("div", mergeProps({ ref: _ctx.itemRef }, _ctx.dataset, {
    "aria-disabled": _ctx.disabled,
    class: {
      "el-dropdown-menu__item": true,
      "is-disabled": _ctx.disabled,
      "el-dropdown-menu__item--divided": _ctx.divided
    },
    tabindex: _ctx.tabIndex,
    role: "menuitem",
    onClick: _cache[0] || (_cache[0] = (e) => _ctx.$emit("click", e)),
    onFocus: _cache[1] || (_cache[1] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),
    onKeydown: _cache[2] || (_cache[2] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args)),
    onMousedown: _cache[3] || (_cache[3] = (...args) => _ctx.handleMousedown && _ctx.handleMousedown(...args)),
    onPointermove: _cache[4] || (_cache[4] = (e) => _ctx.$emit("pointermove", e)),
    onPointerleave: _cache[5] || (_cache[5] = (e) => _ctx.$emit("pointerleave", e))
  }), [
    _ctx.icon ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
      default: withCtx(() => [
        (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
      ]),
      _: 1
    })) : createCommentVNode("v-if", true),
    renderSlot(_ctx.$slots, "default")
  ], 16, _hoisted_1);
}

export { render };
//# sourceMappingURL=dropdown-item-impl.vue_vue_type_template_id_6daab4f2_lang.mjs.map
