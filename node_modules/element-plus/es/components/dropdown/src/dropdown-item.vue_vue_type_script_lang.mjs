import { defineComponent, getCurrentInstance, ref, computed, unref, inject } from 'vue';
import '../../roving-focus-group/index.mjs';
import { composeEventHandlers, whenMouse } from '../../../utils/dom.mjs';
import './dropdown-item-impl.mjs';
import { useDropdown } from './useDropdown.mjs';
import { ElCollectionItem, dropdownItemProps } from './dropdown.mjs';
import { DROPDOWN_INJECTION_KEY } from './tokens.mjs';
import script$1 from '../../roving-focus-group/src/roving-focus-item.vue_vue_type_script_lang.mjs';
import script$2 from './dropdown-item-impl.vue_vue_type_script_lang.mjs';

var script = defineComponent({
  name: "ElDropdownItem",
  components: {
    ElDropdownCollectionItem: ElCollectionItem,
    ElRovingFocusItem: script$1,
    ElDropdownItemImpl: script$2
  },
  props: dropdownItemProps,
  emits: ["pointermove", "pointerleave"],
  setup(props, { emit }) {
    const { elDropdown } = useDropdown();
    const _instance = getCurrentInstance();
    const itemRef = ref(null);
    const textContent = computed(() => {
      var _a, _b;
      return (_b = (_a = unref(itemRef)) == null ? void 0 : _a.textContent) != null ? _b : "";
    });
    const { onItemEnter, onItemLeave } = inject(DROPDOWN_INJECTION_KEY, void 0);
    const handlePointerMove = composeEventHandlers((e) => {
      emit("pointermove", e);
      return e.defaultPrevented;
    }, whenMouse((e) => {
      var _a;
      if (props.disabled) {
        onItemLeave(e);
      } else {
        onItemEnter(e);
        if (!e.defaultPrevented) {
          ;
          (_a = e.currentTarget) == null ? void 0 : _a.focus();
        }
      }
    }));
    const handlePointerLeave = composeEventHandlers((e) => {
      emit("pointerleave", e);
      return e.defaultPrevented;
    }, whenMouse((e) => {
      onItemLeave(e);
    }));
    function handleClick(e) {
      var _a, _b, _c;
      if (props.disabled) {
        e.stopImmediatePropagation();
        return;
      }
      if ((_a = elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a.value) {
        (_b = elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
      }
      (_c = elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props.command, _instance, e);
    }
    return {
      handleClick,
      handlePointerMove,
      handlePointerLeave,
      textContent
    };
  }
});

export { script as default };
//# sourceMappingURL=dropdown-item.vue_vue_type_script_lang.mjs.map
