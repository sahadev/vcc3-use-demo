import { defineComponent, ref, computed, unref } from 'vue';
import { ElTooltip } from '../../tooltip/index.mjs';
import '../../../utils/util.mjs';
import { usePopoverProps } from './popover.mjs';
import { isString } from '@vue/shared';

const emits = ["update:visible", "after-enter", "after-leave"];
const NAME = "ElPopover";
var script = defineComponent({
  name: NAME,
  components: {
    ElTooltip
  },
  props: usePopoverProps,
  emits,
  setup(props) {
    const tooltipRef = ref(null);
    const popperRef = computed(() => {
      var _a;
      return (_a = unref(tooltipRef)) == null ? void 0 : _a.popperRef;
    });
    const width = computed(() => {
      if (isString(props.width)) {
        return props.width;
      }
      return `${props.width}px`;
    });
    const style = computed(() => {
      return [
        {
          width: width.value
        },
        props.popperStyle
      ];
    });
    const kls = computed(() => {
      return [
        { "el-popover--plain": !!props.content },
        "el-popover",
        props.popperClass
      ];
    });
    return {
      kls,
      style,
      tooltipRef,
      popperRef
    };
  }
});

export { script as default };
//# sourceMappingURL=index.vue_vue_type_script_lang.mjs.map
