import { defineComponent, inject, watch } from 'vue';
import '../../slot/index.mjs';
import '../../../hooks/index.mjs';
import { usePopperTriggerProps } from './popper.mjs';
import { POPPER_INJECTION_KEY } from './tokens.mjs';
import { unwrapMeasurableEl } from './utils.mjs';
import OnlyChild from '../../slot/src/only-child.mjs';
import { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';

var script = defineComponent({
  name: "ElPopperTrigger",
  components: { ElOnlyChild: OnlyChild },
  inheritAttrs: false,
  props: {
    ...usePopperTriggerProps,
    onMouseenter: Function,
    onMouseleave: Function,
    onMousedown: Function,
    onKeydown: Function,
    onFocus: Function,
    onBlur: Function,
    onContextmenu: Function,
    id: String,
    open: Boolean
  },
  setup(props) {
    const { triggerRef } = inject(POPPER_INJECTION_KEY, void 0);
    useForwardRef(triggerRef);
    watch(() => props.virtualRef, (val) => {
      if (val) {
        triggerRef.value = unwrapMeasurableEl(val);
      }
    }, {
      immediate: true
    });
    watch(() => triggerRef.value, (el, prevEl) => {
      if (el && el instanceof HTMLElement) {
        ;
        [
          "onMouseenter",
          "onMouseleave",
          "onMousedown",
          "onKeydown",
          "onFocus",
          "onBlur",
          "onContextmenu"
        ].forEach((eventName) => {
          const handler = props[eventName];
          if (handler) {
            ;
            el.addEventListener(eventName.slice(2).toLowerCase(), handler);
            prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);
          }
        });
      }
    }, {
      immediate: true
    });
    return {
      triggerRef
    };
  }
});

export { script as default };
//# sourceMappingURL=trigger.vue_vue_type_script_lang.mjs.map
