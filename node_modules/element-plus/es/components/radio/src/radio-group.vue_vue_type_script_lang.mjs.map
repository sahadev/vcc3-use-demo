{"version":3,"file":"radio-group.vue_vue_type_script_lang.mjs","sources":["../../../../../../packages/components/radio/src/radio-group.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"radioGroupRef\"\n    class=\"el-radio-group\"\n    role=\"radiogroup\"\n    @keydown=\"handleKeydown\"\n  >\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  provide,\n  onMounted,\n  ref,\n  reactive,\n  toRefs,\n  watch,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { radioGroupKey } from '@element-plus/tokens'\nimport { useFormItem } from '@element-plus/hooks'\nimport { radioGroupEmits, radioGroupProps } from './radio-group'\nimport type { RadioGroupProps } from '..'\n\nexport default defineComponent({\n  name: 'ElRadioGroup',\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const radioGroupRef = ref<HTMLDivElement>()\n    const { formItem } = useFormItem()\n\n    const changeEvent = (value: RadioGroupProps['modelValue']) => {\n      ctx.emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => ctx.emit('change', value))\n    }\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (!radioGroupRef.value) return\n\n      // 左右上下按键 可以在 radio 组内切换不同选项\n      const target = e.target as HTMLInputElement\n      const className =\n        target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]'\n      const radios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>(className)\n      const length = radios.length\n      const index = Array.from(radios).indexOf(target)\n      const roleRadios =\n        radioGroupRef.value.querySelectorAll<HTMLInputElement>('[role=radio]')\n\n      let nextIndex: number | null = null\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === 0 ? length - 1 : index - 1\n          break\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation()\n          e.preventDefault()\n          nextIndex = index === length - 1 ? 0 : index + 1\n          break\n        default:\n          break\n      }\n      if (nextIndex === null) return\n      roleRadios[nextIndex].click()\n      roleRadios[nextIndex].focus()\n    }\n\n    onMounted(() => {\n      const radios =\n        radioGroupRef.value!.querySelectorAll<HTMLInputElement>('[type=radio]')\n      const firstLabel = radios[0]\n      if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0\n      }\n    })\n\n    provide(\n      radioGroupKey,\n      reactive({\n        ...toRefs(props),\n        changeEvent,\n      })\n    )\n\n    watch(\n      () => props.modelValue,\n      () => formItem?.validate('change')\n    )\n\n    return {\n      radioGroupRef,\n      handleKeydown,\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":";;;;;;;;;AA0BA,aAAe,eAAe,CAAC;AAC/B,EAAE,MAAM,cAAc;;AAEtB,EAAE,KAAK,EAAE,eAAe;EACtB,MAAM,KAAK,EAAE,GAAG,EAAE;IAChB,MAAM,aAAa;IACnB,MAAM,EAAE,QAAQ,EAAE;;MAEhB,GAAG,CAAC,KAAK;MACT,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC;KACzC,CAAC;;MAEA,IAAI,CAAC,aAAa,CAAC,KAAK;QACtB,OAAO;MACT,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;;;MAGxB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;MAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,OAAO;;MAE/B,IAAI,YAAY,IAAI,CAAC;MACrB,QAAQ,CAAC,CAAC;QACR,KAAK;QACL,KAAK,WAAW,EAAE;UAChB,EAAE;UACF,CAAC,CAAC,cAAc,EAAE,CAAC;UACnB,SAAS,GAAG,KAAK,KAAK,CAAC;UACvB,MAAM;QACR,KAAK,UAAU;QACf,KAAK,UAAU,CAAC,IAAI;;UAElB,CAAC,CAAC,cAAc,EAAE;UAClB,SAAS,GAAG;UACZ,MAAM;QACR;UACE,MAAM;;UAEN,cAAc,IAAI;;gBAEZ,CAAC,SAAS,CAAC,CAAC;gBACZ,CAAC,SAAS,CAAC,CAAC;;aAEf,CAAC,MAAM;YACR,MAAM,gBAAgB,CAAC,MAAM,gBAAgB;YAC7C;UACF,CAAC;;;MAGL,CAAC;WACI,CAAC,aAAa,EAAE;MACrB,GAAG,MAAM,CAAC,KAAK,CAAC;;;IAGlB,KAAK,CAAC;;mBAES;MACb,aAAa;MACb;;;;;;"}