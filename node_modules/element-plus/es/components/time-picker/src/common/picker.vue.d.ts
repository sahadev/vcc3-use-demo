import { nextTick } from 'vue';
import dayjs from 'dayjs';
import { onClickOutside } from '@vueuse/core';
import type { Dayjs } from 'dayjs';
import type { ComponentPublicInstance } from 'vue';
import type { Options } from '@popperjs/core';
interface PickerOptions {
    isValidValue: (date: Dayjs) => boolean;
    handleKeydown: (event: KeyboardEvent) => void;
    parseUserInput: (value: Dayjs) => dayjs.Dayjs;
    formatToString: (value: Dayjs) => string | string[];
    getRangeAvailableTime: (date: Dayjs) => dayjs.Dayjs;
    getDefaultValue: () => Dayjs;
    panelReady: boolean;
    handleClear: () => void;
}
declare const _default: import("vue").DefineComponent<{
    id: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    name: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    popperClass: {
        type: StringConstructor;
        default: string;
    };
    format: {
        type: StringConstructor;
    };
    valueFormat: {
        type: import("vue").PropType<string>;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearIcon: {
        type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
        default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{}>, {}>;
    };
    editable: {
        type: BooleanConstructor;
        default: boolean;
    };
    prefixIcon: {
        type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("../../../../utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popperOptions: {
        type: import("vue").PropType<Partial<Options>>;
        default: () => {};
    };
    modelValue: {
        type: import("vue").PropType<string | number | Date | (string | number | Date)[]>;
        default: string;
    };
    rangeSeparator: {
        type: StringConstructor;
        default: string;
    };
    startPlaceholder: StringConstructor;
    endPlaceholder: StringConstructor;
    defaultValue: {
        type: import("vue").PropType<Date | Date[]>;
    };
    defaultTime: {
        type: import("vue").PropType<Date | Date[]>;
    };
    isRange: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabledHours: {
        type: FunctionConstructor;
    };
    disabledMinutes: {
        type: FunctionConstructor;
    };
    disabledSeconds: {
        type: FunctionConstructor;
    };
    disabledDate: {
        type: FunctionConstructor;
    };
    cellClassName: {
        type: FunctionConstructor;
    };
    shortcuts: {
        type: ArrayConstructor;
        default: () => never[];
    };
    arrowControl: {
        type: BooleanConstructor;
        default: boolean;
    };
    validateEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    unlinkPanels: BooleanConstructor;
}, {
    elPopperOptions: Options;
    isDatesPicker: import("vue").ComputedRef<boolean>;
    handleEndChange: () => void;
    handleStartChange: () => void;
    handleStartInput: (event: any) => void;
    handleEndInput: (event: any) => void;
    onUserInput: (e: any) => void;
    handleChange: () => void;
    handleKeydown: (event: any) => void;
    popperPaneRef: import("vue").ComputedRef<HTMLElement | null | undefined>;
    onClickOutside: typeof onClickOutside;
    pickerSize: import("vue").ComputedRef<import("../../../../utils/types").ComponentSize>;
    isRangeInput: import("vue").ComputedRef<boolean>;
    onMouseLeave: () => void;
    onMouseEnter: () => void;
    onClearIconClick: (event: any) => void;
    showClose: import("vue").Ref<boolean>;
    triggerIcon: import("vue").ComputedRef<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
    onPick: (date?: any, visible?: boolean) => void;
    handleFocus: (e: any) => void;
    handleBlur: () => void;
    pickerVisible: import("vue").Ref<boolean>;
    pickerActualVisible: import("vue").Ref<boolean>;
    displayValue: import("vue").ComputedRef<string | string[] | undefined>;
    parsedValue: import("vue").ComputedRef<any>;
    setSelectionRange: (start: any, end: any, pos: any) => void;
    refPopper: import("vue").Ref<({
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../../../utils/props").BuildPropType<import("../../../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<Options>;
            strategy: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            virtualRef: import("../../..").Measurable;
            virtualTriggering: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            openDelay: number;
            visibleArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        }> & Omit<Readonly<{
            openDelay?: unknown;
            visibleArrow?: unknown;
            hideAfter?: unknown;
            showArrow?: unknown;
            arrowOffset?: unknown;
            disabled?: unknown;
            trigger?: unknown;
            virtualRef?: unknown;
            virtualTriggering?: unknown;
            content?: unknown;
            rawContent?: unknown;
            persistent?: unknown;
            ariaLabel?: unknown;
            visible?: unknown;
            transition?: unknown;
            teleported?: unknown;
            style?: unknown;
            className?: unknown;
            effect?: unknown;
            enterable?: unknown;
            pure?: unknown;
            popperClass?: unknown;
            popperStyle?: unknown;
            referenceEl?: unknown;
            stopPopperMouseEvent?: unknown;
            zIndex?: unknown;
            boundariesPadding?: unknown;
            fallbackPlacements?: unknown;
            gpuAcceleration?: unknown;
            offset?: unknown;
            placement?: unknown;
            popperOptions?: unknown;
            strategy?: unknown;
            showAfter?: unknown;
        } & {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../../../utils/props").BuildPropType<import("../../../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<Options>;
            strategy: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            openDelay: number;
            visibleArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        } & {
            zIndex?: number | undefined;
            ariaLabel?: string | undefined;
            virtualRef?: import("../../..").Measurable | undefined;
            virtualTriggering?: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "style" | "transition" | "offset" | "visible" | "content" | "effect" | "arrowOffset" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "placement" | "popperOptions" | "strategy" | "className" | "enterable" | "pure" | "popperClass" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "showAfter" | "hideAfter" | "rawContent" | "persistent" | "teleported" | "trigger" | "virtualRef" | "virtualTriggering" | "openDelay" | "visibleArrow" | "showArrow">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            openDelay?: unknown;
            visibleArrow?: unknown;
            hideAfter?: unknown;
            showArrow?: unknown;
            arrowOffset?: unknown;
            disabled?: unknown;
            trigger?: unknown;
            virtualRef?: unknown;
            virtualTriggering?: unknown;
            content?: unknown;
            rawContent?: unknown;
            persistent?: unknown;
            ariaLabel?: unknown;
            visible?: unknown;
            transition?: unknown;
            teleported?: unknown;
            style?: unknown;
            className?: unknown;
            effect?: unknown;
            enterable?: unknown;
            pure?: unknown;
            popperClass?: unknown;
            popperStyle?: unknown;
            referenceEl?: unknown;
            stopPopperMouseEvent?: unknown;
            zIndex?: unknown;
            boundariesPadding?: unknown;
            fallbackPlacements?: unknown;
            gpuAcceleration?: unknown;
            offset?: unknown;
            placement?: unknown;
            popperOptions?: unknown;
            strategy?: unknown;
            showAfter?: unknown;
        } & {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../../../utils/props").BuildPropType<import("../../../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<Options>;
            strategy: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            openDelay: number;
            visibleArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        } & {
            zIndex?: number | undefined;
            ariaLabel?: string | undefined;
            virtualRef?: import("../../..").Measurable | undefined;
            virtualTriggering?: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            compatShowAfter: import("vue").ComputedRef<number>;
            compatShowArrow: import("vue").ComputedRef<import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>>;
            popperRef: import("vue").Ref<({
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{}> & Omit<Readonly<{} & {} & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<{} & {} & {}>, import("../../..").ElPopperInjectionContext, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {}> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<{} & {} & {}> & import("vue").ShallowUnwrapRef<import("../../..").ElPopperInjectionContext> & {} & {} & import("vue").ComponentCustomProperties) | null>;
            open: import("vue").Ref<boolean>;
            updatePopper: () => void;
            onOpen: () => void;
            onClose: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
            disabled: boolean;
            style: import("vue").StyleValue;
            transition: string;
            offset: number;
            visible: import("../../../../utils/props").BuildPropType<import("../../../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
            content: string;
            effect: string;
            arrowOffset: number;
            boundariesPadding: number;
            fallbackPlacements: import("@popperjs/core").Placement[];
            gpuAcceleration: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
            placement: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
            popperOptions: Partial<Options>;
            strategy: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
            className: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            enterable: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            pure: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            popperClass: string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | (string | {
                [x: string]: any;
            } | any)[])[])[])[])[])[])[])[])[])[])[];
            popperStyle: import("vue").StyleValue;
            referenceEl: HTMLElement;
            stopPopperMouseEvent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showAfter: number;
            hideAfter: number;
            rawContent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            persistent: boolean;
            teleported: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
            virtualRef: import("../../..").Measurable;
            virtualTriggering: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            openDelay: number;
            visibleArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
            showArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        openDelay?: unknown;
        visibleArrow?: unknown;
        hideAfter?: unknown;
        showArrow?: unknown;
        arrowOffset?: unknown;
        disabled?: unknown;
        trigger?: unknown;
        virtualRef?: unknown;
        virtualTriggering?: unknown;
        content?: unknown;
        rawContent?: unknown;
        persistent?: unknown;
        ariaLabel?: unknown;
        visible?: unknown;
        transition?: unknown;
        teleported?: unknown;
        style?: unknown;
        className?: unknown;
        effect?: unknown;
        enterable?: unknown;
        pure?: unknown;
        popperClass?: unknown;
        popperStyle?: unknown;
        referenceEl?: unknown;
        stopPopperMouseEvent?: unknown;
        zIndex?: unknown;
        boundariesPadding?: unknown;
        fallbackPlacements?: unknown;
        gpuAcceleration?: unknown;
        offset?: unknown;
        placement?: unknown;
        popperOptions?: unknown;
        strategy?: unknown;
        showAfter?: unknown;
    } & {
        disabled: boolean;
        style: import("vue").StyleValue;
        transition: string;
        offset: number;
        visible: import("../../../../utils/props").BuildPropType<import("../../../../utils/props").PropWrapper<boolean | null>, unknown, unknown>;
        content: string;
        effect: string;
        arrowOffset: number;
        boundariesPadding: number;
        fallbackPlacements: import("@popperjs/core").Placement[];
        gpuAcceleration: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], unknown, unknown>;
        placement: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>))[], unknown, unknown>;
        popperOptions: Partial<Options>;
        strategy: import("../../../../utils/props").BuildPropType<(new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("../../../../utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], unknown, unknown>;
        className: string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        enterable: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        pure: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        popperClass: string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | (string | {
            [x: string]: any;
        } | any)[])[])[])[])[])[])[])[])[])[])[];
        popperStyle: import("vue").StyleValue;
        referenceEl: HTMLElement;
        stopPopperMouseEvent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showAfter: number;
        hideAfter: number;
        rawContent: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        persistent: boolean;
        teleported: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        trigger: "click" | "contextmenu" | "focus" | "hover" | ("click" | "contextmenu" | "focus" | "hover")[];
        openDelay: number;
        visibleArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showArrow: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    } & {
        zIndex?: number | undefined;
        ariaLabel?: string | undefined;
        virtualRef?: import("../../..").Measurable | undefined;
        virtualTriggering?: import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown> | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        compatShowAfter: import("vue").ComputedRef<number>;
        compatShowArrow: import("vue").ComputedRef<import("../../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>>;
        popperRef: import("vue").Ref<({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{}> & Omit<Readonly<{} & {} & {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<{} & {} & {}>, import("../../..").ElPopperInjectionContext, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, {}> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof nextTick;
            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<{} & {} & {}> & import("vue").ShallowUnwrapRef<import("../../..").ElPopperInjectionContext> & {} & {} & import("vue").ComponentCustomProperties) | null>;
        open: import("vue").Ref<boolean>;
        updatePopper: () => void;
        onOpen: () => void;
        onClose: () => void;
    }> & {} & {} & import("vue").ComponentCustomProperties) | undefined>;
    inputRef: import("vue").Ref<HTMLElement | ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
    pickerDisabled: import("vue").ComputedRef<boolean | undefined>;
    onSetPickerOption: <T extends keyof PickerOptions>(e: [T, PickerOptions[T]]) => void;
    onCalendarChange: (e: any) => void;
    focus: (focusStartInput?: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "blur" | "focus" | "calendar-change")[], "update:modelValue" | "change" | "blur" | "focus" | "calendar-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    id?: unknown;
    name?: unknown;
    popperClass?: unknown;
    format?: unknown;
    valueFormat?: unknown;
    type?: unknown;
    clearable?: unknown;
    clearIcon?: unknown;
    editable?: unknown;
    prefixIcon?: unknown;
    size?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    placeholder?: unknown;
    popperOptions?: unknown;
    modelValue?: unknown;
    rangeSeparator?: unknown;
    startPlaceholder?: unknown;
    endPlaceholder?: unknown;
    defaultValue?: unknown;
    defaultTime?: unknown;
    isRange?: unknown;
    disabledHours?: unknown;
    disabledMinutes?: unknown;
    disabledSeconds?: unknown;
    disabledDate?: unknown;
    cellClassName?: unknown;
    shortcuts?: unknown;
    arrowControl?: unknown;
    validateEvent?: unknown;
    unlinkPanels?: unknown;
} & {
    type: string;
    disabled: boolean;
    modelValue: string | number | Date | (string | number | Date)[];
    name: string | unknown[];
    editable: boolean;
    popperOptions: Partial<Options>;
    popperClass: string;
    placeholder: string;
    readonly: boolean;
    clearable: boolean;
    prefixIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
    validateEvent: boolean;
    clearIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
    rangeSeparator: string;
    isRange: boolean;
    shortcuts: unknown[];
    arrowControl: boolean;
    unlinkPanels: boolean;
} & {
    size?: import("../../../../utils/types").ComponentSize | undefined;
    id?: string | unknown[] | undefined;
    format?: string | undefined;
    valueFormat?: string | undefined;
    startPlaceholder?: string | undefined;
    endPlaceholder?: string | undefined;
    defaultValue?: Date | Date[] | undefined;
    defaultTime?: Date | Date[] | undefined;
    disabledHours?: Function | undefined;
    disabledMinutes?: Function | undefined;
    disabledSeconds?: Function | undefined;
    disabledDate?: Function | undefined;
    cellClassName?: Function | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onCalendar-change"?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    disabled: boolean;
    modelValue: string | number | Date | (string | number | Date)[];
    name: string | unknown[];
    editable: boolean;
    popperOptions: Partial<Options>;
    popperClass: string;
    placeholder: string;
    readonly: boolean;
    clearable: boolean;
    prefixIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
    validateEvent: boolean;
    clearIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
    rangeSeparator: string;
    isRange: boolean;
    shortcuts: unknown[];
    arrowControl: boolean;
    unlinkPanels: boolean;
}>;
export default _default;
