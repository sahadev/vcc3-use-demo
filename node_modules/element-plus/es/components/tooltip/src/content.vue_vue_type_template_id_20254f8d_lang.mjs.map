{"version":3,"file":"content.vue_vue_type_template_id_20254f8d_lang.mjs","sources":["../../../../../../packages/components/tooltip/src/content.vue?vue&type=template&id=20254f8d&lang.js"],"sourcesContent":["<template>\n  <el-teleport\n    v-if=\"shouldRenderTeleport\"\n    :disabled=\"!teleported\"\n    :container=\"POPPER_CONTAINER_SELECTOR\"\n  >\n    <transition :name=\"transition\" @after-leave=\"onTransitionLeave\">\n      <el-popper-content\n        v-if=\"shouldRenderPopperContent\"\n        v-show=\"shouldShowPopperContent\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n      >\n        <slot />\n        <el-visually-hidden :id=\"id\" role=\"tooltip\">\n          {{ ariaLabel }}\n        </el-visually-hidden>\n      </el-popper-content>\n    </transition>\n  </el-teleport>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, nextTick, ref, unref } from 'vue'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport { ElVisuallyHidden } from '@element-plus/components/visual-hidden'\nimport { ElTeleport } from '@element-plus/components/teleport'\nimport { composeEventHandlers } from '@element-plus/utils/dom'\nimport {\n  useEscapeKeydown,\n  POPPER_CONTAINER_SELECTOR,\n  useDelayedRender,\n} from '@element-plus/hooks'\n\nimport { useTooltipContentProps } from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nexport default defineComponent({\n  name: 'ElTooltipContent',\n  components: {\n    ElTeleport,\n    ElPopperContent,\n    ElVisuallyHidden,\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup(props) {\n    const contentRef = ref<InstanceType<typeof ElPopperContent> | null>(null)\n    const intermediateOpen = ref(false)\n    const entering = ref(false)\n    const leaving = ref(false)\n    const { controlled, id, open, trigger, onClose, onOpen, onShow, onHide } =\n      inject(TOOLTIP_INJECTION_KEY, undefined)!\n    const persistentRef = computed(() => {\n      // For testing, we would always want the content to be rendered\n      // to the DOM, so we need to return true here.\n      if (process.env.NODE_ENV === 'test') {\n        return true\n      }\n      return props.persistent\n    })\n\n    const contentStyle = computed(() => (props.style ?? {}) as any)\n    const shouldRenderTeleport = computed(() => {\n      if (unref(persistentRef)) return true\n      return unref(unref(entering) ? open : intermediateOpen)\n    })\n\n    const shouldRenderPopperContent = computed(() => {\n      if (unref(persistentRef)) return true\n      return unref(unref(leaving) ? open : intermediateOpen)\n    })\n\n    const shouldShowPopperContent = computed(() => {\n      // This is for control persistent mode transition\n      // When persistent this element will always be rendered, we simply use v-show to control the transition\n      if (unref(persistentRef)) {\n        return unref(unref(leaving) ? open : intermediateOpen)\n      }\n      return true\n    })\n\n    const ariaHidden = computed(\n      () =>\n        !(unref(shouldRenderPopperContent) && unref(shouldShowPopperContent))\n    )\n\n    useEscapeKeydown(onClose)\n\n    useDelayedRender({\n      indicator: open,\n      intermediateIndicator: intermediateOpen,\n      shouldSetIntermediate: (step) => {\n        // we don't want to set the intermediateOpen because we want the transition to finish.\n        // After transition finishes, with the hook after-leave we can call intermediate.value = false\n        return step === 'hide' ? false : true\n      },\n      beforeShow: () => {\n        // indicates interruption of hide transition\n        if (unref(leaving)) {\n          leaving.value = false\n          intermediateOpen.value = false\n        }\n        entering.value = true\n      },\n      beforeHide: () => {\n        // indicates interruption of show transition\n        if (unref(entering)) {\n          entering.value = false\n          return\n        }\n        leaving.value = true\n      },\n      afterShow: () => {\n        if (!unref(open)) return\n        entering.value = false\n        onShow()\n        nextTick(() => {\n          unref(contentRef)?.updatePopper()\n        })\n      },\n      afterHide: () => {\n        if (unref(open)) return\n        // prevent the content from hiding if it's still open\n        onHide()\n      },\n    })\n\n    const onTransitionLeave = () => {\n      if (unref(open)) return\n      leaving.value = false\n      intermediateOpen.value = false\n    }\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true\n    }\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable) {\n        onOpen()\n      }\n    })\n\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === 'hover') {\n        onClose()\n      }\n    })\n\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      shouldRenderTeleport,\n      shouldRenderPopperContent,\n      shouldShowPopperContent,\n      open,\n      POPPER_CONTAINER_SELECTOR,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave,\n    }\n  },\n})\n</script>\n"],"names":["_Transition","_toDisplayString"],"mappings":";;;;;;;;;;;;kBAIgBA;;0BAEZ;;;;;;;;;;gCAKkB;oBACb;;;oBAGA;oBACA;;;4BAGQ;0BACF,EAAE;;;;;;4BAMD;;;;;;;kCAKmBC;;;;;;;;;;;;;;;;;;;"}