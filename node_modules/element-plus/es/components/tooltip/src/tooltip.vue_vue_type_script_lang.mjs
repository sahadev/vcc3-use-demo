import { defineComponent, computed, ref, unref, toRef, provide, readonly } from 'vue';
import { ElPopper } from '../../popper/index.mjs';
import { debugWarn } from '../../../utils/error.mjs';
import { isUndefined, isBool } from '../../../utils/util.mjs';
import '../../../hooks/index.mjs';
import './content.mjs';
import './trigger.mjs';
import { useTooltipContentProps, useTooltipTriggerProps, useTooltipProps } from './tooltip.mjs';
import { TOOLTIP_INJECTION_KEY } from './tokens.mjs';
import { createModelToggleComposable } from '../../../hooks/use-model-toggle/index.mjs';
import script$1 from '../../popper/src/arrow.vue_vue_type_script_lang.mjs';
import script$2 from './content.vue_vue_type_script_lang.mjs';
import script$3 from './trigger.vue_vue_type_script_lang.mjs';
import { usePopperArrowProps } from '../../popper/src/popper.mjs';
import { usePopperContainer } from '../../../hooks/use-popper-container/index.mjs';
import { useId } from '../../../hooks/use-id/index.mjs';
import { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index.mjs';

const { useModelToggleProps, useModelToggle, useModelToggleEmits } = createModelToggleComposable("visible");
var script = defineComponent({
  name: "ElTooltip",
  components: {
    ElPopper,
    ElPopperArrow: script$1,
    ElTooltipContent: script$2,
    ElTooltipTrigger: script$3
  },
  props: {
    ...useModelToggleProps,
    ...useTooltipContentProps,
    ...useTooltipTriggerProps,
    ...usePopperArrowProps,
    ...useTooltipProps
  },
  emits: [...useModelToggleEmits, "show", "hide"],
  setup(props, { emit }) {
    usePopperContainer();
    const compatShowAfter = computed(() => {
      if (!isUndefined(props.openDelay)) {
        debugWarn("ElTooltip", "open-delay is about to be deprecated in the next major version, please use `show-after` instead");
      }
      return props.openDelay || props.showAfter;
    });
    const compatShowArrow = computed(() => {
      if (!isUndefined(props.visibleArrow)) {
        debugWarn("ElTooltip", "`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead");
      }
      return isBool(props.visibleArrow) ? props.visibleArrow : props.showArrow;
    });
    const id = useId();
    const popperRef = ref(null);
    const updatePopper = () => {
      var _a;
      const popperComponent = unref(popperRef);
      if (popperComponent) {
        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();
      }
    };
    const open = ref(false);
    const { show, hide } = useModelToggle({
      indicator: open
    });
    const { onOpen, onClose } = useDelayedToggle({
      showAfter: compatShowAfter,
      hideAfter: toRef(props, "hideAfter"),
      open: show,
      close: hide
    });
    const controlled = computed(() => isBool(props.visible));
    provide(TOOLTIP_INJECTION_KEY, {
      controlled,
      id,
      open: readonly(open),
      trigger: toRef(props, "trigger"),
      onOpen,
      onClose,
      onToggle: () => {
        if (unref(open)) {
          onClose();
        } else {
          onOpen();
        }
      },
      onShow: () => {
        emit("show");
      },
      onHide: () => {
        emit("hide");
      }
    });
    return {
      compatShowAfter,
      compatShowArrow,
      popperRef,
      open,
      updatePopper,
      onOpen,
      onClose
    };
  }
});

export { script as default };
//# sourceMappingURL=tooltip.vue_vue_type_script_lang.mjs.map
