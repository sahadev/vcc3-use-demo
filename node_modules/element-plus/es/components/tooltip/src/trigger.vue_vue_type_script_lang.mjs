import { defineComponent, inject, ref, unref, toRef } from 'vue';
import '../../popper/index.mjs';
import { EVENT_CODE } from '../../../utils/aria.mjs';
import { composeEventHandlers } from '../../../utils/dom.mjs';
import { TOOLTIP_INJECTION_KEY } from './tokens.mjs';
import { useTooltipTriggerProps } from './tooltip.mjs';
import { whenTrigger } from './utils.mjs';
import script$1 from '../../popper/src/trigger.vue_vue_type_script_lang.mjs';

var script = defineComponent({
  name: "ElTooltipTrigger",
  components: {
    ElPopperTrigger: script$1
  },
  props: useTooltipTriggerProps,
  setup(props) {
    const { controlled, id, open, onOpen, onClose, onToggle } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const triggerRef = ref(null);
    const stopWhenControlledOrDisabled = () => {
      if (unref(controlled) || props.disabled) {
        return true;
      }
    };
    const trigger = toRef(props, "trigger");
    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
    const onMousedown = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {
      if (e.button === 0) {
        onToggle(e);
      }
    }));
    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
      e.preventDefault();
      onToggle(e);
    }));
    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
      const { code } = e;
      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {
        onToggle(e);
      }
    });
    return {
      onBlur,
      onContextMenu,
      onFocus,
      onMouseenter,
      onMouseleave,
      onMousedown,
      onKeydown,
      open,
      id,
      triggerRef
    };
  }
});

export { script as default };
//# sourceMappingURL=trigger.vue_vue_type_script_lang.mjs.map
