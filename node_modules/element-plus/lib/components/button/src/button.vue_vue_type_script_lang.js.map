{"version":3,"file":"button.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/button/src/button.vue"],"sourcesContent":["<template>\n  <button\n    ref=\"buttonRef\"\n    :class=\"[\n      'el-button',\n      buttonType ? 'el-button--' + buttonType : '',\n      buttonSize ? 'el-button--' + buttonSize : '',\n      {\n        'is-disabled': buttonDisabled,\n        'is-loading': loading,\n        'is-plain': plain,\n        'is-round': round,\n        'is-circle': circle,\n      },\n    ]\"\n    :disabled=\"buttonDisabled || loading\"\n    :autofocus=\"autofocus\"\n    :type=\"nativeType\"\n    :style=\"buttonStyle\"\n    @click=\"handleClick\"\n  >\n    <el-icon v-if=\"loading\" class=\"is-loading\">\n      <loading />\n    </el-icon>\n    <el-icon v-else-if=\"icon\">\n      <component :is=\"icon\" />\n    </el-icon>\n    <span\n      v-if=\"$slots.default\"\n      :class=\"{ 'el-button__text--expand': shouldAddSpace }\"\n    >\n      <slot></slot>\n    </span>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { computed, inject, defineComponent, Text, ref } from 'vue'\nimport { useCssVar } from '@vueuse/core'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  useDisabled,\n  useFormItem,\n  useGlobalConfig,\n  useSize,\n} from '@element-plus/hooks'\nimport { buttonGroupContextKey } from '@element-plus/tokens'\nimport { Loading } from '@element-plus/icons-vue'\n\nimport { buttonEmits, buttonProps } from './button'\n\nexport default defineComponent({\n  name: 'ElButton',\n\n  components: {\n    ElIcon,\n    Loading,\n  },\n\n  props: buttonProps,\n  emits: buttonEmits,\n\n  setup(props, { emit, slots }) {\n    const buttonRef = ref()\n    const buttonGroupContext = inject(buttonGroupContextKey, undefined)\n    const globalConfig = useGlobalConfig('button')\n    const autoInsertSpace = computed(\n      () =>\n        props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false\n    )\n\n    // add space between two characters in Chinese\n    const shouldAddSpace = computed(() => {\n      const defaultSlot = slots.default?.()\n      if (autoInsertSpace.value && defaultSlot?.length === 1) {\n        const slot = defaultSlot[0]\n        if (slot?.type === Text) {\n          const text = slot.children\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text as string)\n        }\n      }\n      return false\n    })\n\n    const { form } = useFormItem()\n    const buttonSize = useSize(computed(() => buttonGroupContext?.size))\n    const buttonDisabled = useDisabled()\n    const buttonType = computed(\n      () => props.type || buttonGroupContext?.type || ''\n    )\n\n    // calculate hover & active color by color\n    const typeColor = computed(\n      () => useCssVar(`--el-color-${props.type}`).value\n    )\n    const buttonStyle = computed(() => {\n      let styles = {}\n\n      const buttonColor = props.color || typeColor.value\n\n      if (buttonColor) {\n        const shadeBgColor = new TinyColor(buttonColor).shade(10).toString()\n        if (props.plain) {\n          styles = {\n            '--el-button-bg-color': new TinyColor(buttonColor)\n              .tint(90)\n              .toString(),\n            '--el-button-text-color': buttonColor,\n            '--el-button-hover-text-color': 'var(--el-color-white)',\n            '--el-button-hover-bg-color': buttonColor,\n            '--el-button-hover-border-color': buttonColor,\n            '--el-button-active-bg-color': shadeBgColor,\n            '--el-button-active-text-color': 'var(--el-color-white)',\n            '--el-button-active-border-color': shadeBgColor,\n          }\n        } else {\n          const tintBgColor = new TinyColor(buttonColor).tint(20).toString()\n          styles = {\n            '--el-button-bg-color': buttonColor,\n            '--el-button-border-color': buttonColor,\n            '--el-button-hover-bg-color': tintBgColor,\n            '--el-button-hover-border-color': tintBgColor,\n            '--el-button-active-bg-color': shadeBgColor,\n            '--el-button-active-border-color': shadeBgColor,\n          }\n        }\n\n        if (buttonDisabled.value) {\n          const disabledButtonColor = new TinyColor(buttonColor)\n            .tint(50)\n            .toString()\n          styles['--el-button-disabled-bg-color'] = disabledButtonColor\n          styles['--el-button-disabled-border-color'] = disabledButtonColor\n        }\n      }\n\n      return styles\n    })\n\n    const handleClick = (evt: MouseEvent) => {\n      if (props.nativeType === 'reset') {\n        form?.resetFields()\n      }\n      emit('click', evt)\n    }\n\n    return {\n      buttonRef,\n      buttonStyle,\n\n      buttonSize,\n      buttonType,\n      buttonDisabled,\n\n      shouldAddSpace,\n\n      handleClick,\n    }\n  },\n})\n</script>\n"],"names":["ElIcon","Loading","buttonProps","buttonEmits","computed","useFormItem","useSize","useDisabled","TinyColor"],"mappings":";;;;;;;;;;;;;;;;;;AAkDA,EAAE,gBAAgB;;AAElB,YAAIA,YAAM;aACNC,gBAAO;;EAET,KAAK,EAAEC;OACF,EAAEC;OACF,CAAC;;;IAGJ,MAAM;IACN,MAAM;;MAEJ,OAAO,MAAM,CAAC,KAAK,KAAK;KACzB,CAAC,CAAC;IACH,MAAM,cAAc,GAAGC,YAAQ,CAAC,MAAM;MACpC,IAAI,EAAE,CAAC;MACP,MAAM,WAAW,GAAG,GAAG,GAAG;MAC1B,IAAI;QACF,MAAM,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;;;iBAGnB,6BAA6B,CAAC;;OAExC;MACD,OAAO,KAAK,CAAC;;YAEP,IAAI,EAAE,GAAGC;UACX,aAAaC,eAAO,CAACF;UACrB,cAAc,GAAGG,mBAAW,EAAE,CAAC;;;UAG/B;;;MAGJ,IAAI,WAAW,EAAE;QACf,MAAM,YAAY,GAAG,IAAIC,oBAAU,WAAW,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC1D,IAAI,KAAK,CAAC,KAAK,EAAE;UACf,MAAM,GAAG;YACP,sBAAsB,EAAE,IAAIA,mBAAS;;;YAGrC,8BAA8B;YAC9B;YACA,6BAA6B,EAAE;;YAE/B;WACD,CAAC;;UAEF,MAAM,WAAW,GAAG,IAAIA,mBAAS,CAAC,WAAW;;YAE3C;YACA,0BAA0B,EAAE,WAAW;YACvC;YACA;YACA,6BAA6B,EAAE,YAAY;;;;YAI3C,cAAc,CAAC,KAAK,EAAE;gBAClB,mBAAmB,GAAG,IAAIA,mBAAS,CAAC;gBACpC,CAAC,+BAA+B,CAAC,GAAG;gBACpC,CAAC,mCAAmC,CAAC;;;;;UAK3C,WAAW,GAAG,CAAC,GAAG;UAClB,KAAK;YACH,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC;;kBAEnB,EAAE,GAAG,CAAC,CAAC;;;eAGV;;;;oBAIK;oBACA;iBACH;;;;;;;"}