{"version":3,"file":"checkbox-group.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  provide,\n  nextTick,\n  toRefs,\n  h,\n  renderSlot,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/utils/constants'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { useSize } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: 'el-checkbox-group',\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","computed","provide","toRefs","h","renderSlot"],"mappings":";;;;;;;;;;;AAcA,aAAeA,mBAAe,CAAC;;AAE/B,EAAE,KAAK,EAAE;AACT,IAAI,UAAU,EAAE;;AAEhB,aAAa,EAAE,MAAM,EAAE;KAClB;;IAED,GAAG,EAAE;MACH,IAAI,EAAE;MACN,OAAO,EAAE;;IAEX;MACE,IAAI,EAAE,MAAM;MACZ;;QAEE,EAAE;;MAEJ;;QAEE,EAAE;;MAEJ;;aAEO,EAAE;;MAET;;OAEC,EAAE;;MAEH,OAAO,EAAE;;;;OAIR;UACG,EAAE;UACF;IACN;;;YAGQ,CAAC,QAAQ,EAAE,KAAK,EAAE;;KAEzB,CAAC;IACF,MAAM,UAAU,GAAGC,YAAQ,CAAC;MAC1B,MAAM;;OAEL;MACD,GAAG,CAAC,GAAG,EAAE;QACP,WAAW;;MAEb,CAAC;IACHC;;MAEE,UAAU;MACV,GAAGC;uBACc;MACjB;MACA,CAAC;aACE,CAAC,MAAM,KAAK,CAAC;MAChB;;;IAGF,OAAO,MAAM;MACX,OAAOC,KAAC,CAAC,KAAK,CAAC,GAAG,EAAE;QAClB,KAAK,EAAE;QACP,IAAI,EAAE,OAAO;QACb,YAAY,EAAE;OACf,EAAE,CAACC;KACL;;;;;;"}