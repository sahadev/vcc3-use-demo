export declare const ElDialog: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly appendToBody: import("../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly beforeClose: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<(...args: any[]) => void>, unknown, unknown, unknown, unknown>;
    readonly destroyOnClose: import("../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly center: import("../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly customClass: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly closeIcon: import("../../utils/props").BuildPropReturn<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
    readonly closeOnClickModal: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly closeOnPressEscape: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly fullscreen: import("../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly lockScroll: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly modal: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly showClose: import("../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly title: import("../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
    readonly openDelay: import("../../utils/props").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly closeDelay: import("../../utils/props").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly top: import("../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly modelValue: import("../../utils/props").BuildPropReturn<BooleanConstructor, unknown, true, unknown, unknown>;
    readonly modalClass: StringConstructor;
    readonly width: import("../../utils/props").BuildPropReturn<readonly [StringConstructor, NumberConstructor], unknown, unknown, unknown, unknown>;
    readonly zIndex: import("../../utils/props").BuildPropReturn<NumberConstructor, unknown, unknown, unknown, unknown>;
}, {
    afterEnter: () => void;
    afterLeave: () => void;
    beforeLeave: () => void;
    handleClose: () => void;
    onModalClick: () => void;
    close: () => void;
    doClose: () => void;
    closed: import("vue").Ref<boolean>;
    style: import("vue").ComputedRef<import("vue").CSSProperties>;
    rendered: import("vue").Ref<boolean>;
    visible: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number>;
    dialogRef: import("vue").Ref<HTMLElement | undefined>;
    overlayEvent: {
        onClick: (e: MouseEvent) => void;
        onMousedown: (e: MouseEvent) => void;
        onMouseup: (e: MouseEvent) => void;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    open: () => boolean;
    opened: () => boolean;
    close: () => boolean;
    closed: () => boolean;
    "update:modelValue": (value: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly appendToBody?: unknown;
    readonly beforeClose?: unknown;
    readonly destroyOnClose?: unknown;
    readonly center?: unknown;
    readonly customClass?: unknown;
    readonly closeIcon?: unknown;
    readonly closeOnClickModal?: unknown;
    readonly closeOnPressEscape?: unknown;
    readonly fullscreen?: unknown;
    readonly lockScroll?: unknown;
    readonly modal?: unknown;
    readonly showClose?: unknown;
    readonly title?: unknown;
    readonly openDelay?: unknown;
    readonly closeDelay?: unknown;
    readonly top?: unknown;
    readonly modelValue?: unknown;
    readonly modalClass?: unknown;
    readonly width?: unknown;
    readonly zIndex?: unknown;
} & {
    modelValue: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    title: string;
    center: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    openDelay: number;
    showClose: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    appendToBody: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    destroyOnClose: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    customClass: string;
    closeIcon: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    closeOnClickModal: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    closeOnPressEscape: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    fullscreen: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    lockScroll: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    modal: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    closeDelay: number;
} & {
    zIndex?: number | undefined;
    top?: string | undefined;
    width?: import("../../utils/props").BuildPropType<readonly [StringConstructor, NumberConstructor], unknown, unknown> | undefined;
    beforeClose?: ((...args: any[]) => void) | undefined;
    modalClass?: string | undefined;
}> & {
    onClose?: (() => any) | undefined;
    onOpen?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onOpened?: (() => any) | undefined;
    onClosed?: (() => any) | undefined;
}, {
    zIndex: number;
    top: string;
    title: string;
    width: import("../../utils/props").BuildPropType<readonly [StringConstructor, NumberConstructor], unknown, unknown>;
    center: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    openDelay: number;
    showClose: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    appendToBody: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    beforeClose: (...args: any[]) => void;
    destroyOnClose: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    customClass: string;
    closeIcon: import("../../utils/props").BuildPropType<import("../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
    closeOnClickModal: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    closeOnPressEscape: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    fullscreen: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    lockScroll: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    modal: import("../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    closeDelay: number;
}>> & Record<string, any>;
export default ElDialog;
export * from './src/use-dialog';
export * from './src/dialog';
