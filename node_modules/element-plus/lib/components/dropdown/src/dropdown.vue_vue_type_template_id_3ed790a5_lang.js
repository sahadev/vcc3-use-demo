'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

const _hoisted_1 = { class: "el-dropdown" };
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_el_dropdown_collection = vue.resolveComponent("el-dropdown-collection");
  const _component_el_roving_focus_group = vue.resolveComponent("el-roving-focus-group");
  const _component_el_focus_trap = vue.resolveComponent("el-focus-trap");
  const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
  const _component_el_tooltip = vue.resolveComponent("el-tooltip");
  const _component_el_button = vue.resolveComponent("el-button");
  const _component_arrow_down = vue.resolveComponent("arrow-down");
  const _component_el_icon = vue.resolveComponent("el-icon");
  const _component_el_button_group = vue.resolveComponent("el-button-group");
  return vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
    vue.createVNode(_component_el_tooltip, {
      ref: "popperRef",
      effect: _ctx.effect,
      "fallback-placements": ["bottom", "top", "right", "left"],
      "gpu-acceleration": false,
      "hide-after": _ctx.hideTimeout,
      "manual-mode": true,
      placement: _ctx.placement,
      "popper-class": `el-dropdown__popper ${_ctx.popperClass}`,
      "reference-element": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,
      trigger: _ctx.trigger,
      "show-after": _ctx.showTimeout,
      "stop-popper-mouse-event": false,
      "virtual-ref": _ctx.triggeringElementRef,
      "virtual-triggering": _ctx.splitButton,
      "append-to-body": "",
      pure: "",
      transition: "el-zoom-in-top",
      onShow: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("visible-change", true)),
      onHide: _cache[1] || (_cache[1] = ($event) => _ctx.$emit("visible-change", false))
    }, vue.createSlots({
      content: vue.withCtx(() => [
        vue.createVNode(_component_el_scrollbar, {
          ref: "scrollbar",
          "wrap-style": _ctx.wrapStyle,
          tag: "ul",
          "view-class": "el-dropdown__list"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_el_focus_trap, {
              trapped: "",
              onMountOnFocus: _ctx.onMountOnFocus
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_el_roving_focus_group, {
                  loop: _ctx.loop,
                  "current-tab-id": _ctx.currentTabId,
                  orientation: "horizontal",
                  onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
                  onEntryFocus: _ctx.handleEntryFocus
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_el_dropdown_collection, null, {
                      default: vue.withCtx(() => [
                        vue.renderSlot(_ctx.$slots, "dropdown")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEntryFocus"])
              ]),
              _: 3
            }, 8, ["onMountOnFocus"])
          ]),
          _: 3
        }, 8, ["wrap-style"])
      ]),
      _: 2
    }, [
      !_ctx.splitButton ? {
        name: "default",
        fn: vue.withCtx(() => [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.dropdownTriggerKls)
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ])
      } : void 0
    ]), 1032, ["effect", "hide-after", "placement", "popper-class", "reference-element", "trigger", "show-after", "virtual-ref", "virtual-triggering"]),
    _ctx.splitButton ? (vue.openBlock(), vue.createBlock(_component_el_button_group, { key: 0 }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_button, {
          ref: "referenceElementRef",
          size: _ctx.dropdownSize,
          type: _ctx.type,
          onClick: _ctx.handlerMainButtonClick
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["size", "type", "onClick"]),
        vue.createVNode(_component_el_button, {
          ref: "triggeringElementRef",
          size: _ctx.dropdownSize,
          type: _ctx.type,
          class: "el-dropdown__caret-button"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_el_icon, { class: "el-dropdown__icon" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_arrow_down)
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["size", "type"])
      ]),
      _: 3
    })) : vue.createCommentVNode("v-if", true)
  ]);
}

exports.render = render;
//# sourceMappingURL=dropdown.vue_vue_type_template_id_3ed790a5_lang.js.map
