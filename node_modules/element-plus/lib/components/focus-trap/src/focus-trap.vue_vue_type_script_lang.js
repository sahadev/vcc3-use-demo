'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var aria = require('../../../utils/aria.js');
var dom = require('../../../utils/dom.js');
var utils = require('./utils.js');
var tokens = require('./tokens.js');

var script = vue.defineComponent({
  name: "ElFocusTrap",
  inheritAttrs: false,
  props: {
    loop: Boolean,
    trapped: Boolean
  },
  emits: [tokens.ON_MOUNT_FOCUS_EVT, tokens.ON_UNMOUNT_FOCUS_EVT],
  setup(props, { emit }) {
    const focusTrapRef = vue.ref();
    const forwardRef = vue.ref(null);
    let lastFocusBeforeMounted;
    let lastFocusAfterMounted;
    const focusLayer = {
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    };
    const onKeydown = (e) => {
      if (!props.loop && !props.trapped)
        return;
      if (focusLayer.paused)
        return;
      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e;
      const { loop } = props;
      const isTabbing = key === aria.EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
      const currentFocusingEl = document.activeElement;
      if (isTabbing && currentFocusingEl) {
        const container = currentTarget;
        const [first, last] = utils.getEdges(container);
        const isTabbable = first && last;
        if (!isTabbable) {
          if (currentFocusingEl === container)
            e.preventDefault();
        } else {
          if (!shiftKey && currentFocusingEl === last) {
            e.preventDefault();
            if (loop)
              utils.tryFocus(first, true);
          } else if (shiftKey && currentFocusingEl === first) {
            e.preventDefault();
            if (loop)
              utils.tryFocus(last, true);
          }
        }
      }
    };
    vue.provide(tokens.FOCUS_TRAP_INJECTION_KEY, {
      focusTrapRef: forwardRef,
      onKeydown
    });
    const focusOnMount = (e) => {
      emit(tokens.ON_MOUNT_FOCUS_EVT, e);
    };
    const focusOnUnmount = (e) => emit(tokens.ON_UNMOUNT_FOCUS_EVT, e);
    const onFocusIn = (e) => {
      const trapContainer = vue.unref(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      const target = e.target;
      if (target && trapContainer.contains(target)) {
        lastFocusAfterMounted = target;
      } else {
        utils.tryFocus(lastFocusAfterMounted, true);
      }
    };
    const onFocusOut = (e) => {
      const trapContainer = vue.unref(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      if (!trapContainer.contains(e.relatedTarget)) {
        utils.tryFocus(lastFocusAfterMounted, true);
      }
    };
    vue.onMounted(() => {
      const trapContainer = vue.unref(forwardRef);
      if (trapContainer) {
        utils.focusableStack.push(focusLayer);
        const prevFocusedElement = document.activeElement;
        lastFocusBeforeMounted = prevFocusedElement;
        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
        if (!isPrevFocusContained) {
          const mountEvent = new Event(tokens.FOCUS_ON_MOUNT, tokens.FOCUS_ON_MOUNT_OPTS);
          dom.on(trapContainer, tokens.FOCUS_ON_MOUNT, focusOnMount);
          trapContainer.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            utils.focusFirstDescendant(utils.obtainAllFocusableElements(trapContainer), true);
            if (document.activeElement === prevFocusedElement) {
              utils.tryFocus(trapContainer);
            }
          }
        }
      }
      vue.watch(() => props.trapped, (trapped) => {
        if (trapped) {
          dom.on(document, "focusin", onFocusIn);
          dom.on(document, "focusout", onFocusOut);
        } else {
          dom.off(document, "focusin", onFocusIn);
          dom.off(document, "focusout", onFocusOut);
        }
      }, { immediate: true });
    });
    vue.onBeforeUnmount(() => {
      const trapContainer = vue.unref(forwardRef);
      if (trapContainer) {
        dom.off(trapContainer, tokens.FOCUS_ON_MOUNT, focusOnMount);
        const unmountEvent = new Event(tokens.FOCUS_ON_UNMOUNT, tokens.FOCUS_ON_MOUNT_OPTS);
        dom.on(trapContainer, tokens.FOCUS_ON_UNMOUNT, focusOnUnmount);
        trapContainer.dispatchEvent(unmountEvent);
        if (!unmountEvent.defaultPrevented) {
          utils.tryFocus(lastFocusBeforeMounted != null ? lastFocusBeforeMounted : document.body, true);
        }
        dom.off(trapContainer, tokens.FOCUS_ON_UNMOUNT, focusOnUnmount);
        utils.focusableStack.remove(focusLayer);
      }
    });
    return {
      focusTrapRef,
      forwardRef,
      onKeydown
    };
  }
});

exports["default"] = script;
//# sourceMappingURL=focus-trap.vue_vue_type_script_lang.js.map
