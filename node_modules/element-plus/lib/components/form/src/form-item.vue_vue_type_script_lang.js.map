{"version":3,"file":"form-item.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/form/src/form-item.vue"],"sourcesContent":["<template>\n  <div ref=\"formItemRef\" class=\"el-form-item\" :class=\"formItemClass\">\n    <LabelWrap\n      :is-auto-width=\"labelStyle.width === 'auto'\"\n      :update-all=\"elForm.labelWidth === 'auto'\"\n    >\n      <label\n        v-if=\"label || $slots.label\"\n        :for=\"labelFor\"\n        class=\"el-form-item__label\"\n        :style=\"labelStyle\"\n      >\n        <slot name=\"label\" :label=\"currentLabel\">\n          {{ currentLabel }}\n        </slot>\n      </label>\n    </LabelWrap>\n    <div class=\"el-form-item__content\" :style=\"contentStyle\">\n      <slot></slot>\n      <transition name=\"el-zoom-in-top\">\n        <slot v-if=\"shouldShowError\" name=\"error\" :error=\"validateMessage\">\n          <div\n            class=\"el-form-item__error\"\n            :class=\"{\n              'el-form-item__error--inline':\n                typeof inlineMessage === 'boolean'\n                  ? inlineMessage\n                  : elForm.inlineMessage || false,\n            }\"\n          >\n            {{ validateMessage }}\n          </div>\n        </slot>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n  nextTick,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport AsyncValidator from 'async-validator'\nimport { addUnit, getPropByPath } from '@element-plus/utils/util'\nimport { isValidComponentSize } from '@element-plus/utils/validators'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport { useSize } from '@element-plus/hooks'\nimport LabelWrap from './label-wrap'\n\nimport type { PropType, CSSProperties } from 'vue'\nimport type { ComponentSize } from '@element-plus/utils/types'\nimport type { ElFormContext, ValidateFieldCallback } from '@element-plus/tokens'\nimport type { FormItemRule } from './form.type'\n\nexport default defineComponent({\n  name: 'ElFormItem',\n  componentName: 'ElFormItem',\n  components: {\n    LabelWrap,\n  },\n  props: {\n    label: String,\n    labelWidth: {\n      type: [String, Number],\n      default: '',\n    },\n    prop: String,\n    required: {\n      type: Boolean,\n      default: undefined,\n    },\n    rules: [Object, Array] as PropType<FormItemRule | FormItemRule[]>,\n    error: String,\n    validateStatus: String,\n    for: String,\n    inlineMessage: {\n      type: [String, Boolean],\n      default: '',\n    },\n    showMessage: {\n      type: Boolean,\n      default: true,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n  },\n  setup(props, { slots }) {\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const validateState = ref('')\n    const validateMessage = ref('')\n    const isValidationEnabled = ref(false)\n\n    const computedLabelWidth = ref('')\n\n    const formItemRef = ref<HTMLDivElement>()\n\n    const vm = getCurrentInstance()\n    const isNested = computed(() => {\n      let parent = vm.parent\n      while (parent && parent.type.name !== 'ElForm') {\n        if (parent.type.name === 'ElFormItem') {\n          return true\n        }\n        parent = parent.parent\n      }\n      return false\n    })\n\n    let initialValue = undefined\n\n    watch(\n      () => props.error,\n      (val) => {\n        validateMessage.value = val\n        validateState.value = val ? 'error' : ''\n      },\n      {\n        immediate: true,\n      }\n    )\n    watch(\n      () => props.validateStatus,\n      (val) => {\n        validateState.value = val\n      }\n    )\n\n    const labelFor = computed(() => props.for || props.prop)\n    const labelStyle = computed(() => {\n      const ret: CSSProperties = {}\n      if (elForm.labelPosition === 'top') return ret\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth)\n      if (labelWidth) {\n        ret.width = labelWidth\n      }\n      return ret\n    })\n    const contentStyle = computed(() => {\n      const ret: CSSProperties = {}\n      if (elForm.labelPosition === 'top' || elForm.inline) {\n        return ret\n      }\n      if (!props.label && !props.labelWidth && isNested.value) {\n        return ret\n      }\n      const labelWidth = addUnit(props.labelWidth || elForm.labelWidth)\n      if (!props.label && !slots.label) {\n        ret.marginLeft = labelWidth\n      }\n      return ret\n    })\n    const fieldValue = computed(() => {\n      const model = elForm.model\n      if (!model || !props.prop) {\n        return\n      }\n\n      let path = props.prop\n      if (path.indexOf(':') !== -1) {\n        path = path.replace(/:/, '.')\n      }\n\n      return getPropByPath(model, path, true).v\n    })\n    const isRequired = computed(() => {\n      const rules = getRules()\n      let required = false\n\n      if (rules && rules.length) {\n        rules.every((rule) => {\n          if (rule.required) {\n            required = true\n            return false\n          }\n          return true\n        })\n      }\n      return required\n    })\n    const sizeClass = useSize(undefined, { formItem: false })\n\n    const validate = (\n      trigger: string,\n      callback: ValidateFieldCallback = NOOP\n    ) => {\n      if (!isValidationEnabled.value) {\n        callback()\n        return\n      }\n      const rules = getFilteredRule(trigger)\n      if ((!rules || rules.length === 0) && props.required === undefined) {\n        callback()\n        return\n      }\n      validateState.value = 'validating'\n      const descriptor = {}\n      if (rules && rules.length > 0) {\n        rules.forEach((rule) => {\n          delete rule.trigger\n        })\n      }\n      descriptor[props.prop] = rules\n      const validator = new AsyncValidator(descriptor)\n      const model = {}\n      model[props.prop] = fieldValue.value\n      validator.validate(model, { firstFields: true }, (errors, fields) => {\n        validateState.value = !errors ? 'success' : 'error'\n        validateMessage.value = errors\n          ? errors[0].message || `${props.prop} is required`\n          : ''\n        // fix: #3860 after version 3.5.2, async-validator also return fields if validation fails\n        callback(validateMessage.value, errors ? fields : {})\n        elForm.emit?.(\n          'validate',\n          props.prop,\n          !errors,\n          validateMessage.value || null\n        )\n      })\n    }\n\n    const clearValidate = () => {\n      validateState.value = ''\n      validateMessage.value = ''\n    }\n    const resetField = () => {\n      const model = elForm.model\n      const value = fieldValue.value\n      let path = props.prop\n      if (path.indexOf(':') !== -1) {\n        path = path.replace(/:/, '.')\n      }\n      const prop = getPropByPath(model, path, true)\n      if (Array.isArray(value)) {\n        prop.o[prop.k] = [].concat(initialValue)\n      } else {\n        prop.o[prop.k] = initialValue\n      }\n      nextTick(() => {\n        clearValidate()\n      })\n    }\n\n    const getRules = () => {\n      const formRules = elForm.rules\n      const selfRules = props.rules\n      const requiredRule =\n        props.required !== undefined ? { required: !!props.required } : []\n\n      const prop = getPropByPath(formRules, props.prop || '', false)\n      const normalizedRule = formRules ? prop.o[props.prop || ''] || prop.v : []\n\n      return [].concat(selfRules || normalizedRule || []).concat(requiredRule)\n    }\n    const getFilteredRule = (trigger) => {\n      const rules = getRules()\n\n      return rules\n        .filter((rule) => {\n          if (!rule.trigger || trigger === '') return true\n          if (Array.isArray(rule.trigger)) {\n            return rule.trigger.indexOf(trigger) > -1\n          } else {\n            return rule.trigger === trigger\n          }\n        })\n        .map((rule) => ({ ...rule }))\n    }\n\n    const evaluateValidationEnabled = () => {\n      isValidationEnabled.value = !!getRules()?.length\n    }\n\n    const updateComputedLabelWidth = (width: string | number) => {\n      computedLabelWidth.value = width ? `${width}px` : ''\n    }\n\n    const elFormItem = reactive({\n      ...toRefs(props),\n      size: sizeClass,\n      validateState,\n      $el: formItemRef,\n      evaluateValidationEnabled,\n      resetField,\n      clearValidate,\n      validate,\n      updateComputedLabelWidth,\n    })\n\n    onMounted(() => {\n      if (props.prop) {\n        elForm?.addField(elFormItem)\n\n        const value = fieldValue.value\n        initialValue = Array.isArray(value) ? [...value] : value\n\n        evaluateValidationEnabled()\n      }\n    })\n    onBeforeUnmount(() => {\n      elForm?.removeField(elFormItem)\n    })\n\n    provide(elFormItemKey, elFormItem)\n\n    const formItemClass = computed(() => [\n      {\n        'el-form-item--feedback': elForm.statusIcon,\n        'is-error': validateState.value === 'error',\n        'is-validating': validateState.value === 'validating',\n        'is-success': validateState.value === 'success',\n        'is-required': isRequired.value || props.required,\n        'is-no-asterisk': elForm.hideRequiredAsterisk,\n      },\n      sizeClass.value ? `el-form-item--${sizeClass.value}` : '',\n    ])\n\n    const shouldShowError = computed(() => {\n      return (\n        validateState.value === 'error' &&\n        props.showMessage &&\n        elForm.showMessage\n      )\n    })\n\n    const currentLabel = computed(\n      () => (props.label || '') + (elForm.labelSuffix || '')\n    )\n\n    return {\n      formItemRef,\n      formItemClass,\n      shouldShowError,\n      elForm,\n      labelStyle,\n      contentStyle,\n      validateMessage,\n      labelFor,\n      resetField,\n      clearValidate,\n      currentLabel,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","LabelWrap","ref","getCurrentInstance","computed","useSize","getPropByPath","nextTick","toRefs","onBeforeUnmount"],"mappings":"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"}