import type { ComponentPublicInstance } from 'vue';
declare const _default: import("vue").DefineComponent<{
    readonly step: import("../../../utils/props").BuildPropReturn<NumberConstructor, 1, unknown, unknown, unknown>;
    readonly stepStrictly: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly max: import("../../../utils/props").BuildPropReturn<NumberConstructor, number, unknown, unknown, unknown>;
    readonly min: import("../../../utils/props").BuildPropReturn<NumberConstructor, number, unknown, unknown, unknown>;
    readonly modelValue: import("../../../utils/props").BuildPropReturn<NumberConstructor, unknown, unknown, unknown, unknown>;
    readonly disabled: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly size: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, "small" | "default" | "large", unknown>;
    readonly controls: import("../../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly controlsPosition: import("../../../utils/props").BuildPropReturn<StringConstructor, "", unknown, "" | "right", unknown>;
    readonly name: StringConstructor;
    readonly label: StringConstructor;
    readonly placeholder: StringConstructor;
    readonly precision: import("../../../utils/props").BuildPropReturn<NumberConstructor, unknown, unknown, unknown, unknown>;
}, {
    input: import("vue").Ref<ComponentPublicInstance<import("../../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
        readonly size: import("../../../utils/props").BuildPropReturn<StringConstructor, "", false, "" | "small" | "default" | "large", never>;
        readonly disabled: BooleanConstructor;
        readonly modelValue: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | number | null | undefined>, "", unknown, unknown, unknown>;
        readonly type: import("../../../utils/props").BuildPropReturn<StringConstructor, "text", unknown, unknown, unknown>;
        readonly resize: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, "none" | "both" | "horizontal" | "vertical", unknown>;
        readonly autosize: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        }>, false, unknown, unknown, unknown>;
        readonly autocomplete: import("../../../utils/props").BuildPropReturn<StringConstructor, "off", unknown, unknown, unknown>;
        readonly placeholder: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        readonly form: import("../../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
        readonly readonly: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly clearable: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly showPassword: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly showWordLimit: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly suffixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
        readonly prefixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
        readonly label: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        readonly tabindex: import("../../../utils/props").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, unknown, unknown, unknown>;
        readonly validateEvent: import("../../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        readonly inputStyle: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<import("../../../utils/types").StyleValue>, () => import("../../../utils/types").Mutable<{}>, unknown, unknown, unknown>;
    }, {
        input: import("vue").Ref<HTMLInputElement | undefined>;
        textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
        attrs: import("vue").ComputedRef<Record<string, unknown>>;
        inputSize: import("vue").ComputedRef<import("../../../utils/types").ComponentSize>;
        validateState: import("vue").ComputedRef<string>;
        validateIcon: import("vue").ComputedRef<any>;
        containerStyle: import("vue").ComputedRef<import("../../../utils/types").StyleValue>;
        computedTextareaStyle: import("vue").ComputedRef<import("../../../utils/types").StyleValue>;
        inputDisabled: import("vue").ComputedRef<boolean>;
        showClear: import("vue").ComputedRef<boolean>;
        showPwdVisible: import("vue").ComputedRef<boolean>;
        isWordLimitVisible: import("vue").ComputedRef<boolean>;
        textLength: import("vue").ComputedRef<number>;
        hovering: import("vue").Ref<boolean>;
        inputExceed: import("vue").ComputedRef<boolean>;
        passwordVisible: import("vue").Ref<boolean>;
        inputOrTextarea: import("vue").ComputedRef<HTMLInputElement | HTMLTextAreaElement | undefined>;
        suffixVisible: import("vue").ComputedRef<boolean>;
        needStatusIcon: import("vue").ComputedRef<boolean>;
        resizeTextarea: () => void;
        handleInput: (event: Event) => void;
        handleChange: (event: Event) => void;
        handleFocus: (event: FocusEvent) => void;
        handleBlur: (event: FocusEvent) => void;
        handleCompositionStart: (event: CompositionEvent) => void;
        handleCompositionUpdate: (event: CompositionEvent) => void;
        handleCompositionEnd: (event: CompositionEvent) => void;
        handlePasswordVisible: () => void;
        clear: () => void;
        select: () => void;
        focus: () => void;
        blur: () => void;
        onMouseLeave: (evt: MouseEvent) => void;
        onMouseEnter: (evt: MouseEvent) => void;
        handleKeydown: (evt: KeyboardEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (value: string) => boolean;
        input: (value: string) => boolean;
        change: (value: string) => boolean;
        focus: (evt: FocusEvent) => boolean;
        blur: (evt: FocusEvent) => boolean;
        clear: () => boolean;
        mouseleave: (evt: MouseEvent) => boolean;
        mouseenter: (evt: MouseEvent) => boolean;
        keydown: (evt: KeyboardEvent) => boolean;
        compositionstart: (evt: CompositionEvent) => boolean;
        compositionupdate: (evt: CompositionEvent) => boolean;
        compositionend: (evt: CompositionEvent) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly size?: unknown;
        readonly disabled?: unknown;
        readonly modelValue?: unknown;
        readonly type?: unknown;
        readonly resize?: unknown;
        readonly autosize?: unknown;
        readonly autocomplete?: unknown;
        readonly placeholder?: unknown;
        readonly form?: unknown;
        readonly readonly?: unknown;
        readonly clearable?: unknown;
        readonly showPassword?: unknown;
        readonly showWordLimit?: unknown;
        readonly suffixIcon?: unknown;
        readonly prefixIcon?: unknown;
        readonly label?: unknown;
        readonly tabindex?: unknown;
        readonly validateEvent?: unknown;
        readonly inputStyle?: unknown;
    } & {
        type: string;
        size: import("../../../utils/props").BuildPropType<StringConstructor, "" | "small" | "default" | "large", never>;
        disabled: boolean;
        modelValue: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | number | null | undefined>, unknown, unknown>;
        form: string;
        autosize: boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        };
        autocomplete: string;
        readonly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        clearable: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showPassword: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showWordLimit: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        suffixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        prefixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        validateEvent: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        inputStyle: import("../../../utils/types").StyleValue;
    } & {
        label?: string | undefined;
        resize?: import("../../../utils/props").BuildPropType<StringConstructor, "none" | "both" | "horizontal" | "vertical", unknown> | undefined;
        placeholder?: string | undefined;
        tabindex?: import("../../../utils/props").BuildPropType<readonly [NumberConstructor, StringConstructor], unknown, unknown> | undefined;
    }> & {
        onChange?: ((value: string) => any) | undefined;
        onMouseenter?: ((evt: MouseEvent) => any) | undefined;
        onMouseleave?: ((evt: MouseEvent) => any) | undefined;
        onKeydown?: ((evt: KeyboardEvent) => any) | undefined;
        onFocus?: ((evt: FocusEvent) => any) | undefined;
        onBlur?: ((evt: FocusEvent) => any) | undefined;
        onInput?: ((value: string) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onCompositionend?: ((evt: CompositionEvent) => any) | undefined;
        onCompositionstart?: ((evt: CompositionEvent) => any) | undefined;
        onCompositionupdate?: ((evt: CompositionEvent) => any) | undefined;
        onClear?: (() => any) | undefined;
    }, {
        type: string;
        size: import("../../../utils/props").BuildPropType<StringConstructor, "" | "small" | "default" | "large", never>;
        disabled: boolean;
        modelValue: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | number | null | undefined>, unknown, unknown>;
        label: string;
        form: string;
        resize: import("../../../utils/props").BuildPropType<StringConstructor, "none" | "both" | "horizontal" | "vertical", unknown>;
        autosize: boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        };
        autocomplete: string;
        placeholder: string;
        readonly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        clearable: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showPassword: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showWordLimit: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        suffixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        prefixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        tabindex: import("../../../utils/props").BuildPropType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
        validateEvent: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        inputStyle: import("../../../utils/types").StyleValue;
    }>> & Record<string, any>, {}, {}, {}, {}, {}, import("../../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
        readonly size: import("../../../utils/props").BuildPropReturn<StringConstructor, "", false, "" | "small" | "default" | "large", never>;
        readonly disabled: BooleanConstructor;
        readonly modelValue: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | number | null | undefined>, "", unknown, unknown, unknown>;
        readonly type: import("../../../utils/props").BuildPropReturn<StringConstructor, "text", unknown, unknown, unknown>;
        readonly resize: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, "none" | "both" | "horizontal" | "vertical", unknown>;
        readonly autosize: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        }>, false, unknown, unknown, unknown>;
        readonly autocomplete: import("../../../utils/props").BuildPropReturn<StringConstructor, "off", unknown, unknown, unknown>;
        readonly placeholder: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        readonly form: import("../../../utils/props").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
        readonly readonly: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly clearable: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly showPassword: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly showWordLimit: import("../../../utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
        readonly suffixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
        readonly prefixIcon: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
        readonly label: import("../../../utils/props").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        readonly tabindex: import("../../../utils/props").BuildPropReturn<readonly [NumberConstructor, StringConstructor], unknown, unknown, unknown, unknown>;
        readonly validateEvent: import("../../../utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        readonly inputStyle: import("../../../utils/props").BuildPropReturn<import("../../../utils/props").PropWrapper<import("../../../utils/types").StyleValue>, () => import("../../../utils/types").Mutable<{}>, unknown, unknown, unknown>;
    }, {
        input: import("vue").Ref<HTMLInputElement | undefined>;
        textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
        attrs: import("vue").ComputedRef<Record<string, unknown>>;
        inputSize: import("vue").ComputedRef<import("../../../utils/types").ComponentSize>;
        validateState: import("vue").ComputedRef<string>;
        validateIcon: import("vue").ComputedRef<any>;
        containerStyle: import("vue").ComputedRef<import("../../../utils/types").StyleValue>;
        computedTextareaStyle: import("vue").ComputedRef<import("../../../utils/types").StyleValue>;
        inputDisabled: import("vue").ComputedRef<boolean>;
        showClear: import("vue").ComputedRef<boolean>;
        showPwdVisible: import("vue").ComputedRef<boolean>;
        isWordLimitVisible: import("vue").ComputedRef<boolean>;
        textLength: import("vue").ComputedRef<number>;
        hovering: import("vue").Ref<boolean>;
        inputExceed: import("vue").ComputedRef<boolean>;
        passwordVisible: import("vue").Ref<boolean>;
        inputOrTextarea: import("vue").ComputedRef<HTMLInputElement | HTMLTextAreaElement | undefined>;
        suffixVisible: import("vue").ComputedRef<boolean>;
        needStatusIcon: import("vue").ComputedRef<boolean>;
        resizeTextarea: () => void;
        handleInput: (event: Event) => void;
        handleChange: (event: Event) => void;
        handleFocus: (event: FocusEvent) => void;
        handleBlur: (event: FocusEvent) => void;
        handleCompositionStart: (event: CompositionEvent) => void;
        handleCompositionUpdate: (event: CompositionEvent) => void;
        handleCompositionEnd: (event: CompositionEvent) => void;
        handlePasswordVisible: () => void;
        clear: () => void;
        select: () => void;
        focus: () => void;
        blur: () => void;
        onMouseLeave: (evt: MouseEvent) => void;
        onMouseEnter: (evt: MouseEvent) => void;
        handleKeydown: (evt: KeyboardEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (value: string) => boolean;
        input: (value: string) => boolean;
        change: (value: string) => boolean;
        focus: (evt: FocusEvent) => boolean;
        blur: (evt: FocusEvent) => boolean;
        clear: () => boolean;
        mouseleave: (evt: MouseEvent) => boolean;
        mouseenter: (evt: MouseEvent) => boolean;
        keydown: (evt: KeyboardEvent) => boolean;
        compositionstart: (evt: CompositionEvent) => boolean;
        compositionupdate: (evt: CompositionEvent) => boolean;
        compositionend: (evt: CompositionEvent) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly size?: unknown;
        readonly disabled?: unknown;
        readonly modelValue?: unknown;
        readonly type?: unknown;
        readonly resize?: unknown;
        readonly autosize?: unknown;
        readonly autocomplete?: unknown;
        readonly placeholder?: unknown;
        readonly form?: unknown;
        readonly readonly?: unknown;
        readonly clearable?: unknown;
        readonly showPassword?: unknown;
        readonly showWordLimit?: unknown;
        readonly suffixIcon?: unknown;
        readonly prefixIcon?: unknown;
        readonly label?: unknown;
        readonly tabindex?: unknown;
        readonly validateEvent?: unknown;
        readonly inputStyle?: unknown;
    } & {
        type: string;
        size: import("../../../utils/props").BuildPropType<StringConstructor, "" | "small" | "default" | "large", never>;
        disabled: boolean;
        modelValue: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | number | null | undefined>, unknown, unknown>;
        form: string;
        autosize: boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        };
        autocomplete: string;
        readonly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        clearable: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showPassword: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showWordLimit: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        suffixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        prefixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        validateEvent: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        inputStyle: import("../../../utils/types").StyleValue;
    } & {
        label?: string | undefined;
        resize?: import("../../../utils/props").BuildPropType<StringConstructor, "none" | "both" | "horizontal" | "vertical", unknown> | undefined;
        placeholder?: string | undefined;
        tabindex?: import("../../../utils/props").BuildPropType<readonly [NumberConstructor, StringConstructor], unknown, unknown> | undefined;
    }> & {
        onChange?: ((value: string) => any) | undefined;
        onMouseenter?: ((evt: MouseEvent) => any) | undefined;
        onMouseleave?: ((evt: MouseEvent) => any) | undefined;
        onKeydown?: ((evt: KeyboardEvent) => any) | undefined;
        onFocus?: ((evt: FocusEvent) => any) | undefined;
        onBlur?: ((evt: FocusEvent) => any) | undefined;
        onInput?: ((value: string) => any) | undefined;
        "onUpdate:modelValue"?: ((value: string) => any) | undefined;
        onCompositionend?: ((evt: CompositionEvent) => any) | undefined;
        onCompositionstart?: ((evt: CompositionEvent) => any) | undefined;
        onCompositionupdate?: ((evt: CompositionEvent) => any) | undefined;
        onClear?: (() => any) | undefined;
    }, {
        type: string;
        size: import("../../../utils/props").BuildPropType<StringConstructor, "" | "small" | "default" | "large", never>;
        disabled: boolean;
        modelValue: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | number | null | undefined>, unknown, unknown>;
        label: string;
        form: string;
        resize: import("../../../utils/props").BuildPropType<StringConstructor, "none" | "both" | "horizontal" | "vertical", unknown>;
        autosize: boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        };
        autocomplete: string;
        placeholder: string;
        readonly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        clearable: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showPassword: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        showWordLimit: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        suffixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        prefixIcon: import("../../../utils/props").BuildPropType<import("../../../utils/props").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
        tabindex: import("../../../utils/props").BuildPropType<readonly [NumberConstructor, StringConstructor], unknown, unknown>;
        validateEvent: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
        inputStyle: import("../../../utils/types").StyleValue;
    }>> & Record<string, any>, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
    displayValue: import("vue").ComputedRef<string | number | undefined>;
    handleInput: (value: string) => string;
    handleInputChange: (value: string) => void;
    controlsAtRight: import("vue").ComputedRef<boolean>;
    decrease: () => void;
    increase: () => void;
    inputNumberSize: import("vue").ComputedRef<import("../../../utils/types").ComponentSize>;
    inputNumberDisabled: import("vue").ComputedRef<boolean>;
    maxDisabled: import("vue").ComputedRef<boolean>;
    minDisabled: import("vue").ComputedRef<boolean>;
    focus: () => void;
    blur: () => void;
    handleFocus: (event: MouseEvent) => void;
    handleBlur: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (prev: number, cur: number) => boolean;
    blur: (e: FocusEvent) => boolean;
    focus: (e: FocusEvent) => boolean;
    input: (val: number) => boolean;
    'update:modelValue': (val: number) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly step?: unknown;
    readonly stepStrictly?: unknown;
    readonly max?: unknown;
    readonly min?: unknown;
    readonly modelValue?: unknown;
    readonly disabled?: unknown;
    readonly size?: unknown;
    readonly controls?: unknown;
    readonly controlsPosition?: unknown;
    readonly name?: unknown;
    readonly label?: unknown;
    readonly placeholder?: unknown;
    readonly precision?: unknown;
} & {
    disabled: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    max: number;
    controls: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    min: number;
    step: number;
    stepStrictly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    controlsPosition: import("../../../utils/props").BuildPropType<StringConstructor, "" | "right", unknown>;
} & {
    size?: import("../../../utils/props").BuildPropType<StringConstructor, "small" | "default" | "large", unknown> | undefined;
    modelValue?: number | undefined;
    label?: string | undefined;
    name?: string | undefined;
    placeholder?: string | undefined;
    precision?: number | undefined;
}> & {
    onChange?: ((prev: number, cur: number) => any) | undefined;
    onFocus?: ((e: FocusEvent) => any) | undefined;
    onBlur?: ((e: FocusEvent) => any) | undefined;
    onInput?: ((val: number) => any) | undefined;
    "onUpdate:modelValue"?: ((val: number) => any) | undefined;
}, {
    size: import("../../../utils/props").BuildPropType<StringConstructor, "small" | "default" | "large", unknown>;
    disabled: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    modelValue: number;
    max: number;
    controls: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    min: number;
    step: number;
    stepStrictly: import("../../../utils/props").BuildPropType<BooleanConstructor, unknown, unknown>;
    controlsPosition: import("../../../utils/props").BuildPropType<StringConstructor, "" | "right", unknown>;
    precision: number;
}>;
export default _default;
