{"version":3,"file":"notification.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/notification/src/notification.vue"],"sourcesContent":["<template>\n  <transition\n    name=\"el-notification-fade\"\n    @before-leave=\"onClose\"\n    @after-leave=\"$emit('destroy')\"\n  >\n    <div\n      v-show=\"visible\"\n      :id=\"id\"\n      :class=\"['el-notification', customClass, horizontalClass]\"\n      :style=\"positionStyle\"\n      role=\"alert\"\n      @mouseenter=\"clearTimer\"\n      @mouseleave=\"startTimer\"\n      @click=\"onClick\"\n    >\n      <el-icon\n        v-if=\"iconComponent\"\n        class=\"el-notification__icon\"\n        :class=\"typeClass\"\n      >\n        <component :is=\"iconComponent\" />\n      </el-icon>\n      <div class=\"el-notification__group\">\n        <h2 class=\"el-notification__title\" v-text=\"title\"></h2>\n        <div\n          v-show=\"message\"\n          class=\"el-notification__content\"\n          :style=\"!!title ? undefined : { margin: 0 }\"\n        >\n          <slot>\n            <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n            <!-- Caution here, message could've been compromized, nerver use user's input as message -->\n            <!-- eslint-disable-next-line -->\n            <p v-else v-html=\"message\"></p>\n          </slot>\n        </div>\n        <el-icon\n          v-if=\"showClose\"\n          class=\"el-notification__closeBtn\"\n          @click.stop=\"close\"\n        >\n          <close />\n        </el-icon>\n      </div>\n    </div>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, onMounted } from 'vue'\nimport { useEventListener, useTimeoutFn } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/utils/aria'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { TypeComponents, TypeComponentsMap } from '@element-plus/utils/icon'\nimport { notificationProps, notificationEmits } from './notification'\n\nimport type { CSSProperties } from 'vue'\n\nexport default defineComponent({\n  name: 'ElNotification',\n\n  components: {\n    ElIcon,\n    ...TypeComponents,\n  },\n\n  props: notificationProps,\n  emits: notificationEmits,\n\n  setup(props) {\n    const visible = ref(false)\n    let timer: (() => void) | undefined = undefined\n\n    const typeClass = computed(() => {\n      const type = props.type\n      return type && TypeComponentsMap[props.type]\n        ? `el-notification--${type}`\n        : ''\n    })\n\n    const iconComponent = computed(() => {\n      return TypeComponentsMap[props.type] || props.icon || ''\n    })\n\n    const horizontalClass = computed(() =>\n      props.position.endsWith('right') ? 'right' : 'left'\n    )\n\n    const verticalProperty = computed(() =>\n      props.position.startsWith('top') ? 'top' : 'bottom'\n    )\n\n    const positionStyle = computed<CSSProperties>(() => {\n      return {\n        [verticalProperty.value]: `${props.offset}px`,\n        zIndex: props.zIndex,\n      }\n    })\n\n    function startTimer() {\n      if (props.duration > 0) {\n        ;({ stop: timer } = useTimeoutFn(() => {\n          if (visible.value) close()\n        }, props.duration))\n      }\n    }\n\n    function clearTimer() {\n      timer?.()\n    }\n\n    function close() {\n      visible.value = false\n    }\n\n    function onKeydown({ code }: KeyboardEvent) {\n      if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {\n        clearTimer() // press delete/backspace clear timer\n      } else if (code === EVENT_CODE.esc) {\n        // press esc to close the notification\n        if (visible.value) {\n          close()\n        }\n      } else {\n        startTimer() // resume timer\n      }\n    }\n\n    // lifecycle\n    onMounted(() => {\n      startTimer()\n      visible.value = true\n    })\n\n    useEventListener(document, 'keydown', onKeydown)\n\n    return {\n      horizontalClass,\n      typeClass,\n      iconComponent,\n      positionStyle,\n      visible,\n\n      close,\n      clearTimer,\n      startTimer,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","TypeComponents","notificationEmits","ref","TypeComponentsMap","computed"],"mappings":";;;;;;;;;;;AAsDA,aAAeA,mBAAe,CAAC;;AAE/B,EAAE,UAAU,EAAE;;AAEd,IAAI,GAAGC,mBAAc;GAClB;;EAED,KAAK,EAAEC;OACF,CAAC;IACJ,MAAM,OAAO,GAAGC;;;MAGd,MAAM,IAAI,GAAG,KAAK,CAAC;MACnB,OAAO,IAAI,IAAIC;;IAEjB,MAAM;MACJ,OAAOA;KACR,CAAC;;IAEF,MAAM,gBAAgB,GAAGC,YAAQ;UAC3B,aAAa,GAAGA;MACpB,OAAO;QACL,iBAAiB,CAAC,KAAK,GAAG,CAAC;QAC3B;;;IAGJ,SAAS,aAAa;MACpB,IAAI,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;;;UAGpB,IAAI,OAAO,CAAC;YACV,KAAK,EAAE,CAAC;;;KAGf;aACQ,UAAU,GAAG;;;IAGtB,SAAS,KAAK,GAAG;MACf,OAAO;;aAEA,SAAS,CAAC,EAAE;MACnB;;;QAGE,WAAW,CAAC;UACV,KAAK,EAAE,CAAC;SACT;aACI;QACL,UAAU,EAAE,CAAC;;;;MAIf,UAAU,EAAE,CAAC;MACb,OAAO,CAAC;;;IAGV,OAAO;MACL;;;MAGA,aAAa;MACb,OAAO;WACF;MACL,UAAU;;;;;;;;"}