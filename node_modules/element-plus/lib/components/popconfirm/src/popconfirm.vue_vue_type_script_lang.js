'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var index = require('../../button/index.js');
var index$2 = require('../../icon/index.js');
var index$1 = require('../../tooltip/index.js');
require('../../../hooks/index.js');
var popconfirm = require('./popconfirm.js');
var index$3 = require('../../../hooks/use-locale/index.js');

var script = vue.defineComponent({
  name: "ElPopconfirm",
  components: {
    ElButton: index.ElButton,
    ElTooltip: index$1.ElTooltip,
    ElIcon: index$2.ElIcon
  },
  props: popconfirm.popconfirmProps,
  setup(props) {
    const { t } = index$3.useLocale();
    const tooltipRef = vue.ref();
    const hidePopper = () => {
      var _a, _b;
      (_b = (_a = vue.unref(tooltipRef)) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);
    };
    const handleCallback = () => {
      hidePopper();
    };
    const confirm = (e) => {
      var _a;
      (_a = props.onConfirm) == null ? void 0 : _a.call(props, e);
      handleCallback();
    };
    const cancel = (e) => {
      var _a;
      (_a = props.onCancel) == null ? void 0 : _a.call(props, e);
      handleCallback();
    };
    const finalConfirmButtonText = vue.computed(() => props.confirmButtonText || t("el.popconfirm.confirmButtonText"));
    const finalCancelButtonText = vue.computed(() => props.cancelButtonText || t("el.popconfirm.cancelButtonText"));
    return {
      finalConfirmButtonText,
      finalCancelButtonText,
      tooltipRef,
      confirm,
      cancel
    };
  }
});

exports["default"] = script;
//# sourceMappingURL=popconfirm.vue_vue_type_script_lang.js.map
