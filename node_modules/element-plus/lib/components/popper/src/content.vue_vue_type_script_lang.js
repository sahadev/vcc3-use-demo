'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var core = require('@popperjs/core');
var popupManager = require('../../../utils/popup-manager.js');
var tokens = require('./tokens.js');
var popper = require('./popper.js');
var utils = require('./utils.js');

var script = vue.defineComponent({
  name: "ElPopperContent",
  props: popper.usePopperContentProps,
  emits: ["mouseenter", "mouseleave"],
  setup(props) {
    const { triggerRef, popperInstanceRef, contentRef } = vue.inject(tokens.POPPER_INJECTION_KEY, void 0);
    const popperContentRef = vue.ref(null);
    const arrowRef = vue.ref(null);
    const arrowOffset = vue.ref();
    vue.provide(tokens.POPPER_CONTENT_INJECTION_KEY, {
      arrowRef,
      arrowOffset
    });
    const contentZIndex = vue.computed(() => props.zIndex || popupManager.PopupManager.nextZIndex());
    const contentStyle = vue.computed(() => [{ zIndex: vue.unref(contentZIndex) }, props.popperStyle]);
    const contentClass = vue.computed(() => [
      {
        "el-popper": true,
        "is-pure": props.pure,
        [`is-${props.effect}`]: !!props.effect
      },
      props.popperClass
    ]);
    const createPopperInstance = ({
      referenceEl,
      popperContentEl,
      arrowEl
    }) => {
      const options = utils.buildPopperOptions(props, {
        arrowEl,
        arrowOffset: vue.unref(arrowOffset)
      });
      return core.createPopper(referenceEl, popperContentEl, options);
    };
    const updatePopper = () => {
      var _a;
      (_a = vue.unref(popperInstanceRef)) == null ? void 0 : _a.update();
    };
    vue.onMounted(() => {
      let updateHandle;
      vue.watch(() => utils.unwrapMeasurableEl(props.referenceEl) || vue.unref(triggerRef), (val) => {
        var _a;
        updateHandle == null ? void 0 : updateHandle();
        if (val) {
          (_a = popperInstanceRef.value) == null ? void 0 : _a.destroy();
          const popperContentEl = vue.unref(popperContentRef);
          contentRef.value = popperContentEl;
          const arrowEl = vue.unref(arrowRef);
          const newInstance = createPopperInstance({
            referenceEl: val,
            popperContentEl: vue.unref(popperContentRef),
            arrowEl
          });
          popperInstanceRef.value = newInstance;
          updateHandle = vue.watch(() => val.getBoundingClientRect(), () => {
            updatePopper();
          }, {
            immediate: true
          });
        } else {
          popperInstanceRef.value = null;
        }
      }, {
        immediate: true
      });
    });
    return {
      popperContentRef,
      popperInstanceRef,
      contentStyle,
      contentClass,
      updatePopper
    };
  }
});

exports["default"] = script;
//# sourceMappingURL=content.vue_vue_type_script_lang.js.map
