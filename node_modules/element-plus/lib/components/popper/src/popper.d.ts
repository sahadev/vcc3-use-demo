import type { ExtractPropTypes, StyleValue } from 'vue';
import type { Placement, Options } from '@popperjs/core';
declare const effects: readonly ["light", "dark"];
declare const triggers: readonly ["click", "contextmenu", "hover", "focus"];
export declare const Effect: {
    LIGHT: string;
    DARK: string;
};
export declare type PopperEffect = typeof effects[number];
export declare type PopperTrigger = typeof triggers[number];
export declare type Measurable = {
    getBoundingClientRect: () => DOMRect;
};
declare type ClassObjectType = Record<string, any>;
declare type ClassType = string | ClassObjectType | ClassType[];
export declare const usePopperArrowProps: {
    arrowOffset: import("element-plus/es/utils/props").BuildPropReturn<NumberConstructor, number, unknown, unknown, unknown>;
};
export declare const usePopperCoreConfigProps: {
    readonly boundariesPadding: import("element-plus/es/utils/props").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly fallbackPlacements: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<Placement[]>, () => never[], unknown, unknown, unknown>;
    readonly gpuAcceleration: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
    readonly offset: import("element-plus/es/utils/props").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
    readonly placement: import("element-plus/es/utils/props").BuildPropReturn<StringConstructor, "bottom", unknown, Placement, unknown>;
    readonly popperOptions: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<Partial<Options>>, () => {}, unknown, unknown, unknown>;
    readonly strategy: import("element-plus/es/utils/props").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
};
export declare const usePopperProps: {
    readonly autoClose: import("element-plus/es/utils/props").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
    readonly cutoff: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
    readonly disabled: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
};
export declare const usePopperContentProps: {
    style: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<StyleValue>, string | import("vue").CSSProperties | (() => string) | (() => import("vue").CSSProperties) | (() => StyleValue[]) | undefined, unknown, unknown, unknown>;
    className: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<ClassType>, string | (() => string) | (() => ClassObjectType) | (() => ClassType[]) | undefined, unknown, unknown, unknown>;
    effect: import("element-plus/es/utils/props").BuildPropReturn<StringConstructor, string | (() => string) | undefined, unknown, unknown, unknown>;
    enterable: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
    pure: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
    popperClass: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<ClassType>, string | (() => string) | (() => ClassObjectType) | (() => ClassType[]) | undefined, unknown, unknown, unknown>;
    popperStyle: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<StyleValue>, string | import("vue").CSSProperties | (() => string) | (() => import("vue").CSSProperties) | (() => StyleValue[]) | undefined, unknown, unknown, unknown>;
    referenceEl: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<HTMLElement>, HTMLElement | (() => HTMLElement) | undefined, unknown, unknown, unknown>;
    stopPopperMouseEvent: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
    zIndex: NumberConstructor;
    boundariesPadding: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => number & {}) | (() => number) | ((new (...args: any[]) => number & {}) | (() => number))[], 0 | (() => 0) | undefined, false, unknown, unknown>;
    fallbackPlacements: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => Placement[]) | (() => Placement[]) | ((new (...args: any[]) => Placement[]) | (() => Placement[]))[], (() => never[]) | undefined, false, unknown, unknown>;
    gpuAcceleration: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<BooleanConstructor, unknown, unknown>) | ((new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<BooleanConstructor, unknown, unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<BooleanConstructor, unknown, unknown>))[], true | (() => true) | undefined, false, unknown, unknown>;
    offset: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => number & {}) | (() => number) | ((new (...args: any[]) => number & {}) | (() => number))[], 12 | (() => 12) | undefined, false, unknown, unknown>;
    placement: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<StringConstructor, Placement, unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<StringConstructor, Placement, unknown>) | ((new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<StringConstructor, Placement, unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<StringConstructor, Placement, unknown>))[], "bottom" | (() => "bottom") | undefined, false, unknown, unknown>;
    popperOptions: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => Partial<Options>) | (() => Partial<Options>) | ((new (...args: any[]) => Partial<Options>) | (() => Partial<Options>))[], (() => {}) | undefined, false, unknown, unknown>;
    strategy: import("element-plus/es/utils/props").BuildPropReturn<(new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>) | ((new (...args: any[]) => import("element-plus/es/utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown> & {}) | (() => import("element-plus/es/utils/props").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>))[], "absolute" | (() => "absolute") | undefined, false, unknown, unknown>;
};
export declare const usePopperTriggerProps: {
    virtualRef: import("element-plus/es/utils/props").BuildPropReturn<import("element-plus/es/utils/props").PropWrapper<Measurable>, unknown, unknown, unknown, unknown>;
    virtualTriggering: import("element-plus/es/utils/props").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
};
export declare type UsePopperProps = ExtractPropTypes<typeof usePopperProps>;
export declare type UsePopperCoreConfigProps = ExtractPropTypes<typeof usePopperCoreConfigProps>;
export {};
