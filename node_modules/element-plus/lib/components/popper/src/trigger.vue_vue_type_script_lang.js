'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
require('../../slot/index.js');
require('../../../hooks/index.js');
var popper = require('./popper.js');
var tokens = require('./tokens.js');
var utils = require('./utils.js');
var onlyChild = require('../../slot/src/only-child.js');
var index = require('../../../hooks/use-forward-ref/index.js');

var script = vue.defineComponent({
  name: "ElPopperTrigger",
  components: { ElOnlyChild: onlyChild["default"] },
  inheritAttrs: false,
  props: {
    ...popper.usePopperTriggerProps,
    onMouseenter: Function,
    onMouseleave: Function,
    onMousedown: Function,
    onKeydown: Function,
    onFocus: Function,
    onBlur: Function,
    onContextmenu: Function,
    id: String,
    open: Boolean
  },
  setup(props) {
    const { triggerRef } = vue.inject(tokens.POPPER_INJECTION_KEY, void 0);
    index.useForwardRef(triggerRef);
    vue.watch(() => props.virtualRef, (val) => {
      if (val) {
        triggerRef.value = utils.unwrapMeasurableEl(val);
      }
    }, {
      immediate: true
    });
    vue.watch(() => triggerRef.value, (el, prevEl) => {
      if (el && el instanceof HTMLElement) {
        ;
        [
          "onMouseenter",
          "onMouseleave",
          "onMousedown",
          "onKeydown",
          "onFocus",
          "onBlur",
          "onContextmenu"
        ].forEach((eventName) => {
          const handler = props[eventName];
          if (handler) {
            ;
            el.addEventListener(eventName.slice(2).toLowerCase(), handler);
            prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);
          }
        });
      }
    }, {
      immediate: true
    });
    return {
      triggerRef
    };
  }
});

exports["default"] = script;
//# sourceMappingURL=trigger.vue_vue_type_script_lang.js.map
