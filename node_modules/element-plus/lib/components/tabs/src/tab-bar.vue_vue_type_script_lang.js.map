{"version":3,"file":"tab-bar.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"bar$\"\n    :class=\"['el-tabs__active-bar', `is-${rootTabs.props.tabPosition}`]\"\n    :style=\"barStyle\"\n  ></div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  getCurrentInstance,\n  watch,\n  nextTick,\n  ref,\n} from 'vue'\nimport { capitalize } from '@vue/shared'\nimport { useResizeObserver } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils/error'\nimport { tabBar } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, 'must use with ElTabs')\n\n    const bar$ = ref<HTMLDivElement>()\n    const barStyle = ref()\n\n    const getBarStyle = (): CSSProperties => {\n      let offset = 0\n      let tabSize = 0\n\n      const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n      const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n      props.tabs.every((tab) => {\n        const $el = instance.parent?.refs?.[\n          `tab-${tab.paneName}`\n        ] as HTMLElement\n        if (!$el) return false\n\n        if (!tab.active) {\n          return true\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`]\n        const position = sizeDir === 'x' ? 'left' : 'top'\n        offset =\n          $el.getBoundingClientRect()[position] -\n          ($el.parentElement?.getBoundingClientRect()[position] ?? 0)\n        const tabStyles = window.getComputedStyle($el)\n\n        if (sizeName === 'width') {\n          if (props.tabs.length > 1) {\n            tabSize -=\n              parseFloat(tabStyles.paddingLeft) +\n              parseFloat(tabStyles.paddingRight)\n          }\n          offset += parseFloat(tabStyles.paddingLeft)\n        }\n        return false\n      })\n\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n      }\n    }\n\n    const update = () => (barStyle.value = getBarStyle())\n\n    watch(\n      () => props.tabs,\n      async () => {\n        await nextTick()\n        update()\n      },\n      { immediate: true }\n    )\n    useResizeObserver(bar$, () => update())\n\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update,\n    }\n  },\n})\n</script>\n"],"names":["getCurrentInstance","inject","ref","capitalize","nextTick"],"mappings":";;;;;;;;;;;;AAoBA,oBAAoB,GAAG,UAAU;;AAEjC,EAAE,MAAM,cAAc;;AAEtB,EAAE,KAAK,CAAC,KAAK,EAAE;AACf,IAAI,MAAM,QAAQ,GAAGA;IACjB,MAAM,QAAQ,GAAGC;IACjB,KAAK;;IAEL,MAAM;IACN,MAAM,WAAWC,OAAG,EAAE,CAAC;IACvB,MAAM,WAAW,GAAG,MAAM;UACpB,MAAM,GAAG,CAAC,CAAC;;MAEf,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE;MACzB,MAAM,OAAO,GAAG;;QAEd,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QAClB,MAAM,GAAG;QACT,IAAI,CAAC,GAAG;;QAER,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;UACf;;QAEF,OAAO,GAAG,IAAI,CAAC,MAAM,EAAEC,iBAAU,UAAU,CAAC,CAAC;;QAE7C,MAAM,GAAG,GAAG,CAAC;QACb,MAAM,SAAS,GAAG,MAAM,CAAC;YACrB,QAAQ,KAAK;UACf,IAAI,KAAK,CAAC;YACR,OAAO,IAAI;;gBAEP,IAAI;;QAEZ;;aAEK;QACL,CAAC,QAAQ,GAAG,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC;QAC1B;;;UAGE,MAAM,GAAG,cAAc,CAAC,KAAK,GAAG,WAAW;;YAEzCC,cAAU,CAAC;cACT,CAAC;kBACG,EAAE;0BACC,CAAC,IAAI,EAAE,MAAM,MAAM,EAAE,CAAC,CAAC;;UAElC;cACI;;YAEF;MACN;;;;;;"}