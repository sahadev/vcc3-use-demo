{"version":3,"file":"basic-time-spinner.vue_vue_type_script_lang.js","sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div class=\"el-time-spinner\" :class=\"{ 'has-seconds': showSeconds }\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"getRefId(item)\"\n        class=\"el-time-spinner__wrapper\"\n        wrap-style=\"max-height: inherit;\"\n        view-class=\"el-time-spinner__list\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in listMap[item].value\"\n          :key=\"key\"\n          class=\"el-time-spinner__item\"\n          :class=\"{ active: key === timePartsMap[item].value, disabled }\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        class=\"el-time-spinner__wrapper is-arrow\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecreaseClick\"\n          class=\"el-time-spinner__arrow arrow-up\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncreaseClick\"\n          class=\"el-time-spinner__arrow arrow-down\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul class=\"el-time-spinner__list\">\n          <li\n            v-for=\"(time, key) in arrowListMap[item].value\"\n            :key=\"key\"\n            class=\"el-time-spinner__item\"\n            :class=\"{\n              active: time === timePartsMap[item].value,\n              disabled: listMap[item].value[time],\n            }\"\n          >\n            <template v-if=\"time\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, ref, nextTick, computed, onMounted, watch } from 'vue'\nimport debounce from 'lodash/debounce'\nimport { RepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue'\nimport { getTimeLists } from './useTimePicker'\n\nimport type { PropType, Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { Nullable } from '@element-plus/utils/types'\n\nexport default defineComponent({\n  directives: {\n    repeatClick: RepeatClick,\n  },\n\n  components: {\n    ElScrollbar,\n    ElIcon,\n    ArrowUp,\n    ArrowDown,\n  },\n\n  props: {\n    role: {\n      type: String,\n      required: true,\n    },\n    spinnerDate: {\n      type: Object as PropType<Dayjs>,\n      required: true,\n    },\n    showSeconds: {\n      type: Boolean,\n      default: true,\n    },\n    arrowControl: Boolean,\n    amPmMode: {\n      type: String,\n      default: '', // 'a': am/pm; 'A': AM/PM\n    },\n    disabledHours: {\n      type: Function,\n    },\n    disabledMinutes: {\n      type: Function,\n    },\n    disabledSeconds: {\n      type: Function,\n    },\n  },\n\n  emits: ['change', 'select-range', 'set-option'],\n\n  setup(props, ctx) {\n    // data\n    let isScrolling = false\n    const debouncedResetScroll = debounce((type) => {\n      isScrolling = false\n      adjustCurrentSpinner(type)\n    }, 200)\n    const currentScrollbar = ref(null)\n    const listHoursRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listMinutesRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listSecondsRef: Ref<Nullable<HTMLElement>> = ref(null)\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef,\n    }\n\n    // computed\n    const spinnerItems = computed(() => {\n      const arr = ['hours', 'minutes', 'seconds']\n      return props.showSeconds ? arr : arr.slice(0, 2)\n    })\n    const hours = computed(() => {\n      return props.spinnerDate.hour()\n    })\n    const minutes = computed(() => {\n      return props.spinnerDate.minute()\n    })\n    const seconds = computed(() => {\n      return props.spinnerDate.second()\n    })\n    const timePartsMap = computed(() => ({\n      hours,\n      minutes,\n      seconds,\n    }))\n    const hoursList = computed(() => {\n      return getHoursList(props.role)\n    })\n    const minutesList = computed(() => {\n      return getMinutesList(hours.value, props.role)\n    })\n    const secondsList = computed(() => {\n      return getSecondsList(hours.value, minutes.value, props.role)\n    })\n    const listMap = computed(() => ({\n      hours: hoursList,\n      minutes: minutesList,\n      seconds: secondsList,\n    }))\n    const arrowHourList = computed(() => {\n      const hour = hours.value\n      return [\n        hour > 0 ? hour - 1 : undefined,\n        hour,\n        hour < 23 ? hour + 1 : undefined,\n      ]\n    })\n    const arrowMinuteList = computed(() => {\n      const minute = minutes.value\n      return [\n        minute > 0 ? minute - 1 : undefined,\n        minute,\n        minute < 59 ? minute + 1 : undefined,\n      ]\n    })\n    const arrowSecondList = computed(() => {\n      const second = seconds.value\n      return [\n        second > 0 ? second - 1 : undefined,\n        second,\n        second < 59 ? second + 1 : undefined,\n      ]\n    })\n    const arrowListMap = computed(() => ({\n      hours: arrowHourList,\n      minutes: arrowMinuteList,\n      seconds: arrowSecondList,\n    }))\n    const getAmPmFlag = (hour) => {\n      const shouldShowAmPm = !!props.amPmMode\n      if (!shouldShowAmPm) return ''\n      const isCapital = props.amPmMode === 'A'\n      // todo locale\n      let content = hour < 12 ? ' am' : ' pm'\n      if (isCapital) content = content.toUpperCase()\n      return content\n    }\n\n    const emitSelectRange = (type) => {\n      if (type === 'hours') {\n        ctx.emit('select-range', 0, 2)\n      } else if (type === 'minutes') {\n        ctx.emit('select-range', 3, 5)\n      } else if (type === 'seconds') {\n        ctx.emit('select-range', 6, 8)\n      }\n      currentScrollbar.value = type\n    }\n\n    const adjustCurrentSpinner = (type) => {\n      adjustSpinner(type, timePartsMap.value[type].value)\n    }\n\n    // NOTE: used by datetime / date-range panel\n    //       renamed from adjustScrollTop\n    //       should try to refactory it\n    const adjustSpinners = () => {\n      adjustCurrentSpinner('hours')\n      adjustCurrentSpinner('minutes')\n      adjustCurrentSpinner('seconds')\n    }\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return\n      const el = listRefsMap[type]\n      if (el.value) {\n        el.value.$el.querySelector('.el-scrollbar__wrap').scrollTop = Math.max(\n          0,\n          value * typeItemHeight(type)\n        )\n      }\n    }\n\n    const typeItemHeight = (type) => {\n      const el = listRefsMap[type]\n      return el.value.$el.querySelector('li').offsetHeight\n    }\n\n    const onIncreaseClick = () => {\n      scrollDown(1)\n    }\n\n    const onDecreaseClick = () => {\n      scrollDown(-1)\n    }\n\n    const scrollDown = (step) => {\n      if (!currentScrollbar.value) {\n        emitSelectRange('hours')\n      }\n\n      const label = currentScrollbar.value\n      let now = timePartsMap.value[label].value\n      const total = currentScrollbar.value === 'hours' ? 24 : 60\n      now = (now + step + total) % total\n\n      modifyDateField(label, now)\n      adjustSpinner(label, now)\n      nextTick(() => emitSelectRange(currentScrollbar.value))\n    }\n\n    const modifyDateField = (type, value) => {\n      const list = listMap.value[type].value\n      const isDisabled = list[value]\n      if (isDisabled) return\n      switch (type) {\n        case 'hours':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(value)\n              .minute(minutes.value)\n              .second(seconds.value)\n          )\n          break\n        case 'minutes':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(value)\n              .second(seconds.value)\n          )\n          break\n        case 'seconds':\n          ctx.emit(\n            'change',\n            props.spinnerDate\n              .hour(hours.value)\n              .minute(minutes.value)\n              .second(value)\n          )\n          break\n      }\n    }\n\n    const handleClick = (type, { value, disabled }) => {\n      if (!disabled) {\n        modifyDateField(type, value)\n        emitSelectRange(type)\n        adjustSpinner(type, value)\n      }\n    }\n\n    const handleScroll = (type) => {\n      isScrolling = true\n      debouncedResetScroll(type)\n      const value = Math.min(\n        Math.round(\n          (listRefsMap[type].value.$el.querySelector('.el-scrollbar__wrap')\n            .scrollTop -\n            (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n            3) /\n            typeItemHeight(type)\n        ),\n        type === 'hours' ? 23 : 59\n      )\n      modifyDateField(type, value)\n    }\n\n    const scrollBarHeight = (type) => {\n      return listRefsMap[type].value.$el.offsetHeight\n    }\n\n    const bindScrollEvent = () => {\n      const bindFuntion = (type) => {\n        if (listRefsMap[type].value) {\n          listRefsMap[type].value.$el.querySelector(\n            '.el-scrollbar__wrap'\n          ).onscroll = () => {\n            // TODO: scroll is emitted when set scrollTop programatically\n            // should find better solutions in the future!\n            handleScroll(type)\n          }\n        }\n      }\n      bindFuntion('hours')\n      bindFuntion('minutes')\n      bindFuntion('seconds')\n    }\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent()\n        adjustSpinners()\n        // set selection on the first hour part\n        if (props.role === 'start') emitSelectRange('hours')\n      })\n    })\n\n    const getRefId = (item) => {\n      return `list${item.charAt(0).toUpperCase() + item.slice(1)}Ref`\n    }\n\n    ctx.emit('set-option', [`${props.role}_scrollDown`, scrollDown])\n    ctx.emit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\n    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n      props.disabledHours,\n      props.disabledMinutes,\n      props.disabledSeconds\n    )\n\n    watch(\n      () => props.spinnerDate,\n      () => {\n        if (isScrolling) return\n        adjustSpinners()\n      }\n    )\n\n    return {\n      getRefId,\n      spinnerItems,\n      currentScrollbar,\n      hours,\n      minutes,\n      seconds,\n      hoursList,\n      minutesList,\n      arrowHourList,\n      arrowMinuteList,\n      arrowSecondList,\n      getAmPmFlag,\n      emitSelectRange,\n      adjustCurrentSpinner,\n      typeItemHeight,\n      listHoursRef,\n      listMinutesRef,\n      listSecondsRef,\n      onIncreaseClick,\n      onDecreaseClick,\n      handleClick,\n      secondsList,\n      timePartsMap,\n      arrowListMap,\n      listMap,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","RepeatClick","ElIcon","ArrowUp","ArrowDown","ref","computed"],"mappings":"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"}