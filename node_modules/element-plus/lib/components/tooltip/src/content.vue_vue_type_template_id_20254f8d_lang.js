'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_visually_hidden = vue.resolveComponent("el-visually-hidden");
  const _component_el_popper_content = vue.resolveComponent("el-popper-content");
  const _component_el_teleport = vue.resolveComponent("el-teleport");
  return _ctx.shouldRenderTeleport ? (vue.openBlock(), vue.createBlock(_component_el_teleport, {
    key: 0,
    disabled: !_ctx.teleported,
    container: _ctx.POPPER_CONTAINER_SELECTOR
  }, {
    default: vue.withCtx(() => [
      vue.createVNode(vue.Transition, {
        name: _ctx.transition,
        onAfterLeave: _ctx.onTransitionLeave
      }, {
        default: vue.withCtx(() => [
          _ctx.shouldRenderPopperContent ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_popper_content, vue.mergeProps({
            key: 0,
            ref: "contentRef"
          }, _ctx.$attrs, {
            "aria-hidden": _ctx.ariaHidden,
            "boundaries-padding": _ctx.boundariesPadding,
            "fallback-placements": _ctx.fallbackPlacements,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            strategy: _ctx.strategy,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            pure: _ctx.pure,
            "popper-class": _ctx.popperClass,
            "popper-style": [_ctx.popperStyle, _ctx.contentStyle],
            "reference-el": _ctx.referenceEl,
            "z-index": _ctx.zIndex,
            onMouseenter: _ctx.onContentEnter,
            onMouseleave: _ctx.onContentLeave
          }), {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default"),
              vue.createVNode(_component_el_visually_hidden, {
                id: _ctx.id,
                role: "tooltip"
              }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode(vue.toDisplayString(_ctx.ariaLabel), 1)
                ]),
                _: 1
              }, 8, ["id"])
            ]),
            _: 3
          }, 16, ["aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "z-index", "onMouseenter", "onMouseleave"])), [
            [vue.vShow, _ctx.shouldShowPopperContent]
          ]) : vue.createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 8, ["name", "onAfterLeave"])
    ]),
    _: 3
  }, 8, ["disabled", "container"])) : vue.createCommentVNode("v-if", true);
}

exports.render = render;
//# sourceMappingURL=content.vue_vue_type_template_id_20254f8d_lang.js.map
