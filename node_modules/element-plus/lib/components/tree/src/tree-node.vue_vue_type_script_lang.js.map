{"version":3,"file":"tree-node.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    class=\"el-tree-node\"\n    :class=\"{\n      'is-expanded': expanded,\n      'is-current': node.isCurrent,\n      'is-hidden': !node.visible,\n      'is-focusable': !node.disabled,\n      'is-checked': !node.disabled && node.checked,\n      ...getNodeClass(node),\n    }\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      class=\"el-tree-node__content\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          {\n            'is-leaf': node.isLeaf,\n            expanded: !node.isLeaf && expanded,\n          },\n          'el-tree-node__expand-icon',\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\"></component>\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        class=\"el-tree-node__loading-icon is-loading\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        class=\"el-tree-node__children\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  getCurrentInstance,\n  ref,\n  watch,\n  nextTick,\n  inject,\n  provide,\n} from 'vue'\nimport { isString, isFunction } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils/error'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\nimport type { TreeOptionProps, TreeNodeData, RootTreeType } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = () => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n      event.preventDefault()\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","ElCollapseTransition","ElCheckbox","ElIcon","Loading","Node","inject","ref","dragEventsKey","getCurrentInstance","provide","debugWarn","watch","nextTick","isFunction"],"mappings":";;;;;;;;;;;;;;;;;;AAsGA,aAAeA,mBAAe;;AAE9B,EAAE,UAAU,EAAE;AACd,0BAAIC;AACJ,gBAAIC,kBAAU;;AAEd,YAAIC,cAAM;aACNC,gBAAO;GACR;OACI,EAAE;IACL,IAAI,EAAE;MACJ,IAAI,EAAEC;MACN;KACD;;MAEC;MACA;;aAEO,EAAE,OAAO;IAClB;IACA;gBACY;MACV,IAAI,EAAE,OAAO;;KAEd;;OAEE,EAAE,CAAC,aAAa,CAAC;OACjB,CAAC,KAAK,EAAE,GAAG;UACR,EAAE;UACF,OAAOC;IACb;;IAEA,MAAM,UAAU,GAAGC;IACnB,MAAM;IACN,MAAM,KAAK,GAAGA,OAAG,CAAC,IAAI,CAAC,CAAC;IACxB,MAAM,UAAU,GAAGD,UAAM,CAACE,yBAAa,CAAC,CAAC;IACzC,MAAM,WAAWC;IACjBC,WAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAClC,IAAI,KAAK,EAAE;MACTC,eAAS,CAAC,MAAM,EAAE;KACnB;IACD,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE;MACvB,QAAQ,CAAC,QAAQ,IAAI,CAAC;;KAEvB;IACD,MAAM;aACD,CAAC,MAAM;;;KAGX,EAAE,MAAM;MACP,KAAK,CAAC,IAAI,CAAC;MACX,CAAC;IACHC;;KAEC,CAAC,CAAC;IACHA,SAAK;MACH;;aAEG,CAAC,MAAM,KAAK,CAAC,KAAK,QAAQ,EAAE,CAAC;MAChCC;MACA,IAAI;QACF,iBAAiB,CAAC,KAAK,GAAG;;;;MAI5B;MACA;UACI;YACE,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK;MACvC;;;MAGA;MACA,IAAIC,iBAAU,CAAC;QACb;QACA,SAAS,GAAG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;;;;MAIxC;eACS,EAAE,CAAC,SAAS,GAAG;OACvB,MAAM;QACL,OAAO,SAAS,CAAC;;;;MAInB;;;MAGA,UAAU,CAAC,QAAQ,OAAO,CAAC;MAC3B,gBAAgB,CAAC,KAAK,GAAG,aAAa,CAAC;;;MAGvC,MAAM,KAAK,GAAG,KAAK,KAAK,MAAM;MAC9B,MAAM,cAAc,MAAM,CAAC,IAAI,CAAC,CAAC;MACjC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;UACV,CAAC;MACL;QACE;OACD;UACG,IAAI,OAAO;QACb,iBAAiB,CAAC,IAAI,EAAE;UACtB;SACD,CAAC,CAAC;;;MAGL;UACI,iBAAiB,GAAG,CAAC;MACzB,IAAI;QACF,KAAK;;;;KAIR,CAAC;;UAEI,KAAK,CAAC,IAAI,CAAC,MAAM;QACnB,OAAO;MACT;QACE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC;;OAEtE,MAAM;QACL,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;;;KAGtB,CAAC;UACI,iBAAiB,GAAG,CAAC;MACzB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM;MAC/BD,YAAQ,CAAC;QACP,MAAM,KAAK,GAAG;QACd,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE;UACtC,YAAY,EAAE;;UAEd,gBAAgB,OAAO,CAAC;;SAEzB,CAAC,CAAC;QACH,CAAC;MACH;;MAEA,iBAAiB,CAAC,IAAI,CAAC,CAAC;UACpB,CAAC,GAAG,CAAC,IAAI,CAAC;;;MAGd;QACE,OAAO;;;IAGX,MAAM,cAAc,IAAI,KAAK,KAAK;MAChC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS;QACvB,OAAO;gBACC,CAAC;;QAET,QAAQ,EAAE;QACV,CAAC;WACE,CAAC;;UAEF;WACC,CAAC;MACN;IACF;;QAEI,OAAO;MACT,UAAU,CAAC,eAAe,CAAC;MAC3B;WACK;WACA;MACL,IAAI;cACI;uBACS;MACjB;;;MAGA,YAAY;MACZ,kBAAkB;MAClB;uBACiB;2BACI;;2BAEA;qBACN;oBACD;;MAEd;;;;;;;;"}