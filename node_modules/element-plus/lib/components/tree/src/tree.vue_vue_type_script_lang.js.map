{"version":3,"file":"tree.vue_vue_type_script_lang.js","sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    class=\"el-tree\"\n    :class=\"{\n      'el-tree--highlight-current': highlightCurrent,\n      'is-dragging': !!dragState.draggingNode,\n      'is-drop-not-allow': !dragState.allowDrop,\n      'is-drop-inner': dragState.dropType === 'inner',\n    }\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" class=\"el-tree__empty-block\">\n      <span class=\"el-tree__empty-text\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      class=\"el-tree__drop-indicator\"\n    ></div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  provide,\n  computed,\n  watch,\n  getCurrentInstance,\n} from 'vue'\nimport { useLocale } from '@element-plus/hooks'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType, Component } from 'vue'\nimport type { Nullable } from '@element-plus/utils/types'\nimport type {\n  TreeComponentProps,\n  TreeNodeData,\n  TreeKey,\n  TreeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.defaultExpandedKeys = newVal\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly: boolean,\n      includeHalfChecked: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    return {\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","ref","useDragNodeHandler","computed","watch","getCurrentInstance"],"mappings":"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"}